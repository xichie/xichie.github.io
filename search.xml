<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DeepRT论文笔记</title>
      <link href="/article/c85bd4be.html"/>
      <url>/article/c85bd4be.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>论文链接： <a href="https://ieeexplore.ieee.org/document/9708995">https://ieeexplore.ieee.org/document/9708995</a></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ul><li>无处不在的智能手机相机和IoT摄像头，以及深度学习的快速发展。大量的CV驱动的终端应用部署在边缘服务器上。 </li><li>由于服务器GPU资源有限，因此在多租户的场景下（互相抢占资源），让边缘服务器支持soft real time的应用非常困难。 （soft real time推理的应用，即在ddl之前能够响应推理请求，并且允许偶尔违背ddl的约束）</li></ul><p><strong>问题： 如何能够在有限的GPU资源下，及时的完成推理请求，并保证系统的高吞吐？</strong></p><h1 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h1><p><img src="https://img-blog.csdnimg.cn/0402abae23f34ecfb3fc0c7c72abd98a.png" alt="在这里插入图片描述"><br>观察的现象：</p><ul><li>同时执行两个或多个模型并不能显着提高系统吞吐量，并且由于执行时间增加而增加了每个请求的延迟。</li><li>在同一GPU 上执行多个任务时，存在干扰，无法分析或估计任务最坏的情况，增加了调度系统的困难</li><li>批量处理输入数据增加了系统吞吐量，远远超过模型并发执行，但牺牲了请求的执行时间。</li></ul><p><strong>结论：</strong></p><ul><li>并发执行多个模型实例并不能实现我们在保持高吞吐量的同时保证最大延迟的目标； 相反，它引入的干扰使设计实时系统变得困难。 所以采用顺序执行模型实例而不是并发执行。</li><li>批处理增加了吞吐量，但我们需要确保增加的延迟（增加的执行时间+等待属于同一批次的其数据时的排队时间）不会导致ddl miss。</li></ul><h1 id="Design-overview"><a href="#Design-overview" class="headerlink" title="Design overview"></a>Design overview</h1><p><img src="https://img-blog.csdnimg.cn/0cb3c7eab00247e9987fc98b0cad3bc9.png" alt="在这里插入图片描述"></p><p>一共包含四个模块：</p><ul><li>Admission Control Module<ul><li>防止请求过多，导致任务阻塞。控制哪些请求可以进入后续的模块</li></ul></li><li>DisBatcher<ul><li>接收ACM的提交的请求，打包batch，进行batch的分发</li></ul></li><li>Performance Profiler<ul><li>记录不同setting下不同模型的延迟</li></ul></li><li>Adaptation Module<ul><li>处理overrun的任务，尽可能避免ddl miss</li></ul></li></ul><h3 id="请求的处理"><a href="#请求的处理" class="headerlink" title="请求的处理"></a>请求的处理</h3><ul><li>将请求划分成不同的类别<ul><li>模型、输入shape相同的为同一类</li></ul></li><li>为不同类的请求划分time window</li></ul><h3 id="Performance-Profiler"><a href="#Performance-Profiler" class="headerlink" title="Performance Profiler"></a>Performance Profiler</h3><p>离线分析不同模型和输入的执行时间（取最坏情况下的），生成一个映射。交给Admission Control Module</p><h3 id="Admission-Control-Module"><a href="#Admission-Control-Module" class="headerlink" title="Admission Control Module"></a>Admission Control Module</h3><p>已经按请求类别划分了time window，以及不同输入和模型的执行时间。因此，采用基于模拟的方法，来确定哪些请求可以被处理。<br>两个阶段：</p><ol><li>去掉明显在ddl之前完不成的请求</li></ol><p>s: 请求类别； N_s: 该类请求job instance的数量； E_i:  job_i 的执行时间； P_s:  该类请求的时间窗口长度<br><img src="https://img-blog.csdnimg.cn/fd965bca63804ec28fe0fa34904692b7.png" alt="在这里插入图片描述"></p><ol start="2"><li>模拟任务运行，过滤超过ddl的请求</li><li>模拟生成job instance</li><li>使用EDF算法模拟job instance是否应该被调度</li></ol><h3 id="DisBatcher"><a href="#DisBatcher" class="headerlink" title="DisBatcher"></a>DisBatcher</h3><p><img src="https://img-blog.csdnimg.cn/5ad9ab7c6fec46bc8dfb1b960121b080.png" alt="在这里插入图片描述"></p><ul><li>每个time window中相同类别的请求，打包成一个batch，称为<strong>job instance&#x2F;task instance.   (task instance 包含多个job instance)</strong></li><li>设置<strong>job instance&#x2F;task instance</strong>的ddl为对应的time window的长度，即在下一个time window之前必须要完成</li></ul><h4 id="设置time-window的长度"><a href="#设置time-window的长度" class="headerlink" title="设置time window的长度"></a>设置time window的长度</h4><p>如图3，每个job instance中的帧的数量可能是不同的，不同job instance的执行时间有差异。因此，确定time window的长度以保证所有的帧在ddl之前完成很重要。<br><strong>DisBatcher设置time window的长度为所有同类请求中最小的ddl的一半。（证明了在请求到达的时间与ddl之间有一个完整的time window）</strong><br><img src="https://img-blog.csdnimg.cn/f760761959b448be9c24fb2bb73153a4.png" alt="在这里插入图片描述"></p><h3 id="Execution-Worker"><a href="#Execution-Worker" class="headerlink" title="Execution Worker"></a>Execution Worker</h3><p>一旦请求可以被调度，ACM向DisBatcher发送请求相关的metadata（model, ddl, frame shape, period）<br>DisBatcher为每个类别的请求维护了一个队列，根据EDF的原则排序。ddl越早优先级越高。</p><ul><li>worker按优先级执行job instance，监控是否ddl miss。并且，如果实际执行时间ACM估计的时间长，则向ACM报告。</li><li>如果请求已经到达，但是在等待DisBatcher打包，则GPU偶尔会有空闲。<ul><li>DeepRT在time window结束之前，立即发送到GPU进行执行</li></ul></li></ul><h3 id="Adaption-Module"><a href="#Adaption-Module" class="headerlink" title="Adaption Module"></a>Adaption Module</h3><p>当GPU计算相同的任务时，可能相应时间也不同。如果一个job超时，那么会影响后续其它的job。因此需要对超时的任务有惩罚，更重要的是尽可能避免ddl miss。</p><ul><li>为每个类别的job设置可一个惩罚值，初始为0。如果实际的执行时间大于profile的时间，惩罚值增加多的执行时间</li><li>同时，通知DisBatcher减少该类别job的输入shape（降低分辨率），生成新的job instance。减小后，不会与其它相同shape的其它类job打包成同一个batch</li><li>Woker记录新的job instance的执行时间。并从惩罚中减去节省的执行时间。</li></ul><h1 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h1><p><strong>GPU：</strong> RTX2080、Jetson TX2（推理专用）<br>**Baseline： **AIMD、BATCH、BATCH-Delay</p><h4 id="ddl-miss-rate"><a href="#ddl-miss-rate" class="headerlink" title="ddl miss rate:"></a>ddl miss rate:</h4><p><img src="https://img-blog.csdnimg.cn/8f30b22993d548a0b7020abb548b9641.png" alt="在这里插入图片描述"></p><h4 id="overdue"><a href="#overdue" class="headerlink" title="overdue"></a>overdue</h4><p>soft real time 中允许一些请求超过ddl。从图5可以看出，由于使用了EDF算法，DeepRT超时的时间明显短。<br><img src="https://img-blog.csdnimg.cn/a544cd1c2e1742248f826cd2b13527d1.png" alt="在这里插入图片描述"></p><h4 id="Peak-memory-usage"><a href="#Peak-memory-usage" class="headerlink" title="Peak memory usage"></a>Peak memory usage</h4><p><img src="https://img-blog.csdnimg.cn/58e089fa9a7b4e7e89f4dec708600db9.png" alt="在这里插入图片描述"></p><h4 id="Through-amp-handle-the-number-of-concurrent-requests"><a href="#Through-amp-handle-the-number-of-concurrent-requests" class="headerlink" title="Through &amp; handle the number of concurrent requests"></a>Through &amp; handle the number of concurrent requests</h4><p><img src="https://img-blog.csdnimg.cn/bcf8be7158c84064ae4d2f2c14bab96a.png" alt="在这里插入图片描述"></p><h4 id="estimatied-latency-accuracy-amp-amp-ACM-running-time"><a href="#estimatied-latency-accuracy-amp-amp-ACM-running-time" class="headerlink" title="estimatied latency accuracy &amp;&amp; ACM running time"></a>estimatied latency accuracy &amp;&amp; ACM running time</h4><p><img src="https://img-blog.csdnimg.cn/2ea1436852d748aab966ff3c412cf0d1.png" alt="在这里插入图片描述"></p><h4 id="overrun"><a href="#overrun" class="headerlink" title="overrun"></a>overrun</h4><p><img src="https://img-blog.csdnimg.cn/b28c89c3e2224d928f6714785902cb63.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 调度算法 </tag>
            
            <tag> GPU推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>联邦学习</title>
      <link href="/article/3977b5c.html"/>
      <url>/article/3977b5c.html</url>
      
        <content type="html"><![CDATA[<h1 id="为什么要联邦学习"><a href="#为什么要联邦学习" class="headerlink" title="为什么要联邦学习"></a>为什么要联邦学习</h1><p><img src="https://img-blog.csdnimg.cn/37cc1a35b2294f86b1215874fd205298.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAd2FybS0=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>已有的数据中心学习架构，存在成本高昂，数据隐私和安全问题。在用户将数据上传到数据中心的过程中，敏感数据极易受到泄露、攻击和网络的影响。比如，万豪（2018年受影响的客户数为5亿）和eBay（2014年受影响的用户数为1.45亿）。在这种情况下，欧盟实施了一项名为《通用数据保护条例》（GDPR）的新法规，通过设置规则、限制数据共享和存储来保护个人数据。<br>基于上述的这些规则，On-site ML和FL已经成为替代数据中心的解决方案</p><span id="more"></span><p><img src="https://img-blog.csdnimg.cn/8e478f6ec5784a3db69c7817feb6835e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAd2FybS0=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="基于云（集中式）的学习："><a href="#基于云（集中式）的学习：" class="headerlink" title="基于云（集中式）的学习："></a>基于云（集中式）的学习：</h2><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><ul><li>用户数据上传到云上共享，用户很容易泄露</li><li>延迟，数据可以传输数百甚至数千英里才能到达云端</li><li>成本，数据通过网络传输是需要成本的</li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><h2 id="on-site-学习："><a href="#on-site-学习：" class="headerlink" title="on-site 学习："></a>on-site 学习：</h2><p>将ML任务从云端转移到用户设备上，中央服务器将预训练或者通用的ML模型分发给用户，然后每个用户使用本地数据进行训练，对其进行个性化的定制。设备上的智能已被应用于许多应用，如皮肤癌检测、医疗应用、智能教室、神经网络辅助服务等</p><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>数据不离开本地，保护了用户的隐私安全</li></ul><h3 id="存在的问题-1"><a href="#存在的问题-1" class="headerlink" title="存在的问题"></a>存在的问题</h3><ul><li>这种方式构建各自的模型不能获得其它方数据和经验</li></ul><h2 id="联邦学习"><a href="#联邦学习" class="headerlink" title="联邦学习"></a>联邦学习</h2><p>谷歌研究人员在2016年创造了FL，自那以后，它在学术界和工业界都获得了蓬勃发展，席卷全球。它旨在建立一个基于分布数据集的联邦学习模型，在保护数据隐私的前提下实现由多个参与者的本地数据训练出统一的机器学习模型。在FL中，原始数据保存在终端用户设备上，这些设备合作训练联合模型。中央服务器只负责接受并聚合各个用户设备的模型更新和结果，然后再将聚合后的模型发送给各个用户，从而使各个用户之间可以共享知识。<br>FL首先在谷歌的Android键盘Gboard上测试，当Gboard在屏幕上显示一些建议时，根据用户的行为，进行本地学习。然后，综合不同用户的行为，增强预测的结果。<br>目前已有的开源框架有：tensorflow federated（TFF），federated AI technology enabler（FATE）， PySyft, PaddleFL, and Clara training framework。<br>在研究领域，主要有图像分类和NLP。常用的数据集，MNIST和CIFAR。</p><h3 id="学习过程"><a href="#学习过程" class="headerlink" title="学习过程"></a>学习过程</h3><p><img src="https://img-blog.csdnimg.cn/3c89a65f49474315b15a2fbcd2c786c8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAd2FybS0=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><ol><li>中央服务器根据客户端的状态（充电，空闲，wifi连接状态）选择一些客户端。</li><li>被选定的客户端，从中央服务器下载当前的模型参数或权重，使用这些权重初始化本地的模型</li><li>客户端使用本地数据使用SGD算法优化模型，为了降低通信成本，客户端会执行多次SGD算法。</li><li>客户端训练完成后，将优化后的参数发送给中央服务器。客户端可能由于连接不良、计算资源有限、大量培训数据等原因，在培训或参数传输阶段退出。因此，会报告中央服务器无法处理的故障客户端的百分比，并根据收到的更新数量继续处理该过程。如果及时报告的客户数量不足，则放弃本轮的更新。</li><li>中央服务器在根据客户的数据集大小对其进行加权后，聚合所有客户端的更新，产生了一个新的共享模型。</li></ol><h1 id="联邦学习的挑战"><a href="#联邦学习的挑战" class="headerlink" title="联邦学习的挑战"></a>联邦学习的挑战</h1><p>为什么联邦学习不属于典型的分布式学习，主要由于以下的挑战和特性：</p><ul><li>Non-IID数据：不同客户端的数据分布是不同的，并且之间可能会有依赖性。</li><li>不平衡数据：不同客户端的数据量有差距</li><li>大规模分布的数据 ：客户端的数量大，可能大于每个客户端平均样本的数量</li><li>设备连接不可靠：大多数情况下，客户端的连接速度缓慢、有限、昂贵且不可用，大大减少了可用连接的数量。此外，在可用的客户端中，由于计算能力不同，许多客户端可能无法参与每一轮学习。 </li><li>设备内存有限：会有大量的物联网&#x2F;移动设备参与训练，这些设备内存有限</li><li>中毒袭击：客户端的匿名性可能会让攻击者表现得像普通用户，并被选中参与FL。因此，攻击者可以在训练阶段通过提供有毒数据来使模型预测不准确。</li></ul><h1 id="联邦学习的发展"><a href="#联邦学习的发展" class="headerlink" title="联邦学习的发展"></a>联邦学习的发展</h1><p><img src="https://img-blog.csdnimg.cn/17d1a1d943414003b88ff346cda0596b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAd2FybS0=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="系统模型和设计"><a href="#系统模型和设计" class="headerlink" title="系统模型和设计"></a>系统模型和设计</h2><p><img src="https://img-blog.csdnimg.cn/d59c4ce486c94c4e907e69968690e886.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAd2FybS0=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="通信成本"><a href="#通信成本" class="headerlink" title="通信成本"></a>通信成本</h3><p>FL在训练过程中，中央服务器和客户端之间需要多次通信。为了优化通信，已经有了许多的研究工作。</p><ul><li>Konecny等提出了两种方式。一种是结构化更新，通过low rank将模型的参数分成两个矩阵，一个是固定的，另一个才会发送给中央服务器。此外，在通信过程中，只发送非零值而不是整个矩阵。第二种是草图更新（stetched update）。它需要传递所有的模型参数，在发送给中央服务器之前以有损的方式进行压缩。在100台设备上测试模型，每个设备在图像分类任务中训练500个示例。结果显示上传通信量减少。</li><li>[43]中介绍了一种通信成本最小化的方法，旨在减少服务器和客户端生成模型的大小。首先，服务器使用federated dropout技术生成更小的子模型和更少的参数。然后，在服务器端对生成的模型执行有损压缩，并将其发送到客户端，客户端解压后开始训练。最后，客户端更新就会被无损压缩并发送到服务器，服务器进行解压缩然后进行聚合。</li><li>[46]提出了一个增强的FL框架，不仅降低了通信成本，还提高了模型的准确性。通过构建异步策略降低通信成本，允许将深层神经网络的深层和浅层分离，当客户端在全局模型表现更好时，更频繁的发送浅层的参数。另一方面， 通过在聚合中考虑在前几轮中训练的模型，而不是仅在进行中的一轮中训练的模型，提高了模型的准确性。</li></ul><p><strong>总结:</strong> 如果完全按照FL的机制在每轮中更新整个模型参数，在分布式环境中，由于参与设备众多，网络带宽有限，通信成为了FL的主要瓶颈。 </p><h3 id="客户端选择"><a href="#客户端选择" class="headerlink" title="客户端选择"></a>客户端选择</h3><p>在典型的FL中选择客户端时，只考虑正在充电、空闲和WiFi设备。因此，在这些设备中，确定一个随机数以发起与它们的通信并记录它们。然而，在处理通信和计算资源方面的<strong>异构</strong>客户端时，仅依赖这些标准会带来许多缺点，例如训练时间长。为了解决这些问题，很少有人提出工作。</p><h3 id="优化和聚合算法"><a href="#优化和聚合算法" class="headerlink" title="优化和聚合算法"></a>优化和聚合算法</h3><p>FL的目标是本地训练模型，然后在服务器上聚合模型，经过多轮更新得到一个高质量的全局模型。</p><ul><li>[3]提出了FedAvg算法，它将训练过程分为多个回合，每个回合选择固定数量的客户端对本地数据进行学习，然后上传至服务器，对所有的客户端模型加权平均得到全局的模型。</li><li>联邦学习完全依赖于客户数据的均匀分布，会导致模型会偏向于特定客户。Mohri等[54]人提出了一个框架，从模型聚合和模型优化两个方便解决了该问题。</li><li>Liu等[55]提出了一种分层联邦平均算法，在边缘服务器上进行多个本地聚合，然后将本地聚合后的模型发送到中央服务器进行全局聚合。结果证明，通过使用较少的边缘和更多的全局聚合，可以减少通信次数。</li></ul><p><strong>总结：</strong> 由于FL中的通信比计算要昂贵得多，因此优化和聚合算法对于最大限度地减少轮次、快速收敛模型和不给主干网造成负担至关重要。</p><h3 id="Non-IID数据"><a href="#Non-IID数据" class="headerlink" title="Non-IID数据"></a>Non-IID数据</h3><p>由于数据是Non-IID的，在使用SGD优化模型时，会使模型产生偏差。</p><ul><li>Zhao等人[58]解决了Non-IID数据导致的准确性下降的问题。客户端共享一组类别均匀分布的小数据来提高准确性，此外客户端也会使用本地的私有数据进行训练。在CIFAR-10上进行了实验，结果表明，仅使用5%的共享数据，准确率就提高了近30%。 </li><li>[42]提出了Hybrid-FL。为客户端提供了一些激励措施，鼓励它们将数据上传到服务器，这类客户端的数量不超过总数的1%。随后，服务器对收集的数据进行训练，形成一个模型，然后其与客户端上传的模型进行聚合。数据上传客户端、客户端选择和模型上传客户端都是基于启发式算法确定的。</li><li>[59]指出，当在分布式环境上执行FL时，FL面临两个挑战，即统计和系统。当需要从不同节点的非IID分布式数据中训练模型时，会出现统计挑战。在系统挑战方面，由于贡献的设备在通信、存储和计算方面具有不平衡的数据和不同的容量，这导致了一些容错和丢失。</li></ul><h3 id="激励措施"><a href="#激励措施" class="headerlink" title="激励措施"></a>激励措施</h3><p>虽然现有的方法侧重于优化不同的FL方面，但很少有人考虑到客户不愿意参加训练或选择低质量模型更新的客户。如果服务器选择了一些客户端，它们往往会因有限的计算和通信能力而浪费资源。[61]通过基于契约理论设计一种激励机制来解决这一问题，该机制可以激励用户在FL中做出贡献。因此，客户x的数据质量越高，给予x的奖励就越多。</p><p><strong>总结</strong>：在典型的FL中，假设服务器选择的所有客户端都始终可用。然而，这种乐观的假设并不能反映现实世界的情况。相当多的设备很可能在整个过程中退出，甚至由于资源成本和限制而拒绝加入。此外，为了更快地聚合全局模型，非常需要鼓励客户端提供高质量的数据。因此，提出了基于激励的方法来解决这些问题。</p><h1 id="FL的应用"><a href="#FL的应用" class="headerlink" title="FL的应用"></a>FL的应用</h1><ul><li>Gboard应用</li><li>医疗健康</li><li>物联网系统</li><li>边缘计算</li><li>智慧交通</li><li>推荐系统</li><li>网络安全</li></ul><h1 id="FL的隐私和安全"><a href="#FL的隐私和安全" class="headerlink" title="FL的隐私和安全"></a>FL的隐私和安全</h1><p>尽管FL的出现就是通过防止数据共享来实现严格的隐私保护，但与隐私和安全相关的新挑战已经出现。最近的研究表明，模型更新的传输仍然会泄露客户端敏感信息。<br><img src="https://img-blog.csdnimg.cn/62c7173260a74785baf0f7e6724bb130.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAd2FybS0=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>对上述隐私问题的保护，已有的研究主要解决方法</p><ul><li>加密协议和差分隐私</li><li>安全多方计算（Secure Multiparty Computation, SMC）</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1]. S. Abdulrahman, H. Tout, H. Ould-Slimane, A. Mourad, C. Talhi and M. Guizani, “A Survey on Federated Learning: The Journey From Centralized to Distributed On-Site Learning and Beyond,” in IEEE Internet of Things Journal, vol. 8, no. 7, pp. 5476-5497, 1 April1, 2021, doi: 10.1109&#x2F;JIOT.2020.3030072.</p><p>[2]. 王树森. <a href="https://www.youtube.com/watch">https://www.youtube.com/watch</a> v&#x3D;STxtRucv_zo&amp;list&#x3D;PLvOO0btloRns6egXueiRju4DXQjNRJQd5&amp;index&#x3D;4</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言 </tag>
            
            <tag> 算法 </tag>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写作记录</title>
      <link href="/article/9daba997.html"/>
      <url>/article/9daba997.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>definitely confirm——更加肯定，更加确定</p><ul><li>句式：which definitely confirm that the proposed method(s) can not only…., but also…</li></ul></li><li><p>typo——书写错误</p></li><li><p>color，colour——颜色，前者是美式，后者为英式</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python3中的浅拷贝与深拷贝</title>
      <link href="/article/8d566e8a.html"/>
      <url>/article/8d566e8a.html</url>
      
        <content type="html"><![CDATA[<p>在下面的代码中列表a中又包含一个列表和一个字符串。所以在使用copy进行浅拷贝得到b和d，更改a中索引值为0,1，-1的元素，b和d中只有索引值为0被更改，而且b和d的地址和a又不相同，所以可以看出，浅拷贝创建了一个新的对象，但是新对象中所存储的对象并没有被拷贝（和原有的对象用的是同一个地址）。</p><p>而深拷贝显然是将要拷贝的对象和其子对象都进行了拷贝。</p><p>而且还看出将字符串都变为大写，是重新创建了一个新的对象。&#x3D;。&#x3D;</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> copy<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> xa <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">]</span>b <span class="token operator">=</span> copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>a<span class="token punctuation">)</span>c <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>a<span class="token punctuation">)</span>d <span class="token operator">=</span> a<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>e <span class="token operator">=</span> f<span class="token punctuation">(</span>a<span class="token punctuation">)</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>a<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>                    <span class="token comment">#[['a', 'b', 'c'], 0, 2, 3, 'D']</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#[['a', 'b', 'c'], 1, 2, 3, 'd'] False</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#[['a', 'b'], 1, 2, 3, 'd'] False</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#[['a', 'b', 'c'], 1, 2, 3, 'd'] False</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#[['a', 'b', 'c'], 0, 2, 3, 'D'] True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeNet-5模型实现</title>
      <link href="/article/bb9105ac.html"/>
      <url>/article/bb9105ac.html</url>
      
        <content type="html"><![CDATA[<p>现在逐渐的开始接触深度学习的知识，最近看了Ng老师的深度学习视频，看到里面介绍了几种经典的卷积神经网络其中就包含LeNet-5所以就照葫芦画瓢，用tensorflow实现了一下最原始的LeNet-5模型，顺便也是为了学习tensorflow。虽然代码很简单，由于是新手遇到了很多意想不到的坑。所以写篇博客记录一下。</p><p>开始一定要牢记的一句话，一定要把模型分析透了再去写代码，每一层的输入是什么shape，输出是什么shape。最好写纸上，要不写着写着就乱了。（笑哭）</p><p>模型的结构很简单，上图：<br><a href="https://img-blog.csdn.net/20180722175404387?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70">https://img-blog.csdn.net/20180722175404387?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70</a></p><p>模型一共进行了两次卷积，每次卷积后面有一层平均池化层，最后再加两层全连接层。 实验用的数据是手写数字。每一层具体如下：</p><p>卷积层：</p><p>输入层：输入的图片大小为：28<em>28</em>1</p><p>第一层卷积：filter_size为5*5，步长（s）为1，卷积核的个数为6，no padding，激活函数为relu</p><p>第一层平均池化：filter_size为2*2，步长（s）为2（这种池化会使输入的feature map长和宽缩小一倍），no padding</p><p>第二层卷积：filter_size为5*5，步长（s）为1，卷积核的个数为16, no padding，激活函数为relu</p><p>第二层平均池化：filter_size为2*2，步长（s）为2，no padding</p><p>全连接层：</p><p>第一层120个节点，激活函数为relu</p><p>第二层84个节点，激活函数为relu</p><p>输出层10个节点，没有激活函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">inference</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input_tensor<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">"layer1-conv1"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            conv1_weight <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"conv1_variable"</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> initializer<span class="token operator">=</span>tf<span class="token punctuation">.</span>truncated_normal_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            conv1_bias <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"conv1_bias"</span><span class="token punctuation">,</span> shape <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> initializer<span class="token operator">=</span>tf<span class="token punctuation">.</span>constant_initializer<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            conv1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span><span class="token builtin">input</span> <span class="token operator">=</span> input_tensor<span class="token punctuation">,</span> <span class="token builtin">filter</span> <span class="token operator">=</span> conv1_weight<span class="token punctuation">,</span> strides <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding <span class="token operator">=</span> <span class="token string">"VALID"</span><span class="token punctuation">)</span>            relu1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>add<span class="token punctuation">(</span>conv1<span class="token punctuation">,</span> conv1_bias<span class="token punctuation">)</span><span class="token punctuation">)</span>            pool1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>avg_pool<span class="token punctuation">(</span>relu1<span class="token punctuation">,</span> ksize <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> strides <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding <span class="token operator">=</span> <span class="token string">"VALID"</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">"layer2-conv2"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            conv2_weight <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"conv2_variable"</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span> initializer<span class="token operator">=</span>tf<span class="token punctuation">.</span>truncated_normal_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            conv2_bias <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"conv2_bias"</span><span class="token punctuation">,</span> shape <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span> initializer<span class="token operator">=</span>tf<span class="token punctuation">.</span>constant_initializer<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            conv2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span><span class="token builtin">input</span> <span class="token operator">=</span> pool1<span class="token punctuation">,</span> <span class="token builtin">filter</span> <span class="token operator">=</span> conv2_weight<span class="token punctuation">,</span> strides <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding <span class="token operator">=</span> <span class="token string">"VALID"</span><span class="token punctuation">)</span>            relu2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>bias_add<span class="token punctuation">(</span>conv2<span class="token punctuation">,</span> conv2_bias<span class="token punctuation">)</span><span class="token punctuation">)</span>            pool2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>avg_pool<span class="token punctuation">(</span>relu2<span class="token punctuation">,</span> ksize <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> strides <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding <span class="token operator">=</span> <span class="token string">"VALID"</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">"layer3-fc1"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            conv_layer_flatten <span class="token operator">=</span> tf<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span>inputs <span class="token operator">=</span> pool2<span class="token punctuation">)</span>      <span class="token comment">#[batch_size, 256]</span>            fc1_variable <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'fc1_variable'</span><span class="token punctuation">,</span> shape <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">,</span> initializer <span class="token operator">=</span> tf<span class="token punctuation">.</span>random_normal_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.01</span>            fc1_bias <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'fc1_bias'</span><span class="token punctuation">,</span> shape <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">,</span> initializer <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant_initializer<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            fc1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>add<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>conv_layer_flatten<span class="token punctuation">,</span> fc1_variable<span class="token punctuation">)</span><span class="token punctuation">,</span> fc1_bias<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment">#[batch_size, 120]</span>        <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">"layer4-fc2"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            fc2_variable <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"fc2_variable"</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">]</span><span class="token punctuation">,</span> initializer<span class="token operator">=</span>tf<span class="token punctuation">.</span>random_normal_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">*</span> <span class="token number">0.01</span> <span class="token comment">#[batch_size, 84]</span>            fc2_bias <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"fc2_bias"</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">]</span><span class="token punctuation">,</span>initializer <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant_initializer<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            fc2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>add<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>fc1<span class="token punctuation">,</span> fc2_variable<span class="token punctuation">)</span><span class="token punctuation">,</span> fc2_bias<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment">#[batch_size, 84]</span>        <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">"layer5-output"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            output_variable <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"output_variable"</span><span class="token punctuation">,</span> shape <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>initializer <span class="token operator">=</span> tf<span class="token punctuation">.</span>random_normal_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.01</span>            output_bias <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"output_bias"</span><span class="token punctuation">,</span> shape <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>initializer <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant_initializer<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            output <span class="token operator">=</span> tf<span class="token punctuation">.</span>add<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>fc2<span class="token punctuation">,</span> output_variable<span class="token punctuation">)</span><span class="token punctuation">,</span> output_bias<span class="token punctuation">)</span> <span class="token comment">#[batch_size, 10]</span>        <span class="token keyword">return</span> output<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在模型训练的过程中出现了一些问题，开始我为了让初始化的权值尽量都小一些，让每一层的卷积核的权重初始化时都乘以0.01，但是发现如果这么做损失函数收敛的很慢甚至都不会收敛。刚开始的时候我以为是我代码有问题，那个费劲的找bug啊！都是泪。我原来一直认为神经网络权值初始化时应该尽量小一些，看来也不是这样的。经过了千辛万苦模型终于训练好了。</p><p>最终在训练集、测试集、验证集上的精度如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> LeNet5<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># model.train(iter_num=200)</span>    <span class="token comment">#evaluate model on trainSet</span>    images_train <span class="token operator">=</span> model<span class="token punctuation">.</span>mnist<span class="token punctuation">.</span>train<span class="token punctuation">.</span>images    y_true_train <span class="token operator">=</span> model<span class="token punctuation">.</span>mnist<span class="token punctuation">.</span>train<span class="token punctuation">.</span>labels    images_train <span class="token operator">=</span> images_train<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    y_true_train <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y_true_train<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>images_train<span class="token punctuation">,</span> y_true_train<span class="token punctuation">)</span>          <span class="token comment">#accuracy is 0.9611818181818181</span>    <span class="token comment">#evaluate model on testSet</span>    images_test <span class="token operator">=</span> model<span class="token punctuation">.</span>mnist<span class="token punctuation">.</span>test<span class="token punctuation">.</span>images<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    y_true_test <span class="token operator">=</span> model<span class="token punctuation">.</span>mnist<span class="token punctuation">.</span>test<span class="token punctuation">.</span>labels    y_true_test <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y_true_test<span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>images_test<span class="token punctuation">,</span> y_true_test<span class="token punctuation">)</span>              <span class="token comment">#accuracy is 0.9645</span>    <span class="token comment">#evaluate model on validate</span>    images_validation <span class="token operator">=</span> model<span class="token punctuation">.</span>mnist<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>images<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    y_true_validation <span class="token operator">=</span> model<span class="token punctuation">.</span>mnist<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>labels    y_true_validation <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y_true_validation<span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>images_validation<span class="token punctuation">,</span> y_true_validation<span class="token punctuation">)</span>    <span class="token comment">#accuracy is 0.9648</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整代码在我的github中，地址：<a href="https://github.com/NewQJX/DeepLearning/tree/master/LeNet5">https://github.com/NewQJX/DeepLearning/tree/master/LeNet5</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MapReduce单元测试不通过</title>
      <link href="/article/8e63b6f8.html"/>
      <url>/article/8e63b6f8.html</url>
      
        <content type="html"><![CDATA[<p>前几天用mrunit进行单元测试，一直报错：java.lang.IncompatibleClassChangeError: Found interface org.apache.hadoop.mapreduce.TaskInputOutputContext, but class was expected</p><p>在网上查了一下，说这个错误是导入的包有问题，废了老半天劲，原来是mrunit包导入的不对。开始导入包是：</p><p>后来在改了依赖后，pom文件中的依赖是这样写的：</p><dependency>    <groupId>org.apache.mrunit</groupId>    <artifactId>mrunit</artifactId>    <version>1.0.0</version>    <scope>test</scope></dependency><p>但是一直报错误：Missing artifact org.apache.mrunit:mrunit:jar:1.0.0</p><p>最后加了一行改成如下：</p><dependency>        <groupId>org.apache.mrunit</groupId>        <artifactId>mrunit</artifactId>        <version>1.0.0</version>       <classifier>hadoop2</classifier>        <scope>test</scope></dependency>发现错误消失了。 去查看下载的jar包后发现，包名包含hadoop2，mrunit官网看了一下也带着hadoop：<p>要是不加hadoop2，maven肯定不知道下载什么啊。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python读取cifar10数据集</title>
      <link href="/article/a27dd3ed.html"/>
      <url>/article/a27dd3ed.html</url>
      
        <content type="html"><![CDATA[<p>最近学习卷积网络用到cifar10数据集，自己写了一个工具类，用来读取已经下载到本地的cifar10数据集。</p><p>代码写的不算好，但是自己用起来还可以。所以放到网上，有需要的可以拿去用。代码比较少，所以没有写注释。下面介绍一下实现的功能。完整的代码可以在github上下载。地址：<a href="https://github.com/xichie/DeepLearning/tree/master/Cifar10">https://github.com/xichie/DeepLearning/tree/master/Cifar10</a></p><p>文件名为：input_data.py</p><p>创建了一个类Cifar10()：用于读取本地数据集，对数据集进行操作</p><p><strong>init</strong>(self, path, one_hot &#x3D; True): 参数path为本地数据集存储路径。one_hot：决定是否对类别独热编码</p><p>_load_data()：用于加载数据集</p><p>next_batch(batch_size, shuffle &#x3D; True): 该方法返回指定batch_size大小的训练集， shuffle：决定是否打乱顺序</p><p>下面是使用该类的方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> input_data<span class="token keyword">import</span> numpy <span class="token keyword">as</span> nppath <span class="token operator">=</span> <span class="token string">r"E:\pythonCode\TensorFlow\cifar10\cifar-10-batches-py"</span>cifar10 <span class="token operator">=</span> input_data<span class="token punctuation">.</span>load_cifar10<span class="token punctuation">(</span>path<span class="token punctuation">,</span> one_hot <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>images <span class="token operator">=</span> cifar10<span class="token punctuation">.</span>images<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"训练集图片："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>images<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span>labels <span class="token operator">=</span> cifar10<span class="token punctuation">.</span>labels<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"训练集类别："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>labels<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span>test_images <span class="token operator">=</span> cifar10<span class="token punctuation">.</span>test<span class="token punctuation">.</span>images<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试集图片："</span><span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>test_images<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span>test_labels <span class="token operator">=</span> cifar10<span class="token punctuation">.</span>test<span class="token punctuation">.</span>labels<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试集类别："</span><span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>test_labels<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span>batch_xs<span class="token punctuation">,</span> batch_ys <span class="token operator">=</span> cifar10<span class="token punctuation">.</span>next_batch<span class="token punctuation">(</span>batch_size <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">,</span> shuffle <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"batch_xs shape is:"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>batch_xs<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"batch_ys shape is:"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>batch_ys<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KNN在MR和Spark下实现的IO操作比较</title>
      <link href="/article/775bc24d.html"/>
      <url>/article/775bc24d.html</url>
      
        <content type="html"><![CDATA[<p>MapReduce中KNN运行过程I&#x2F;O操作分析：</p><p>实现流程：</p><p>KNN在MapReduce中的实现，认为训练集大小远大于测试集大小。所以测试集缓存在内存中。</p><p>Map任务输入是一个训练集文件的分片（子集），测试集中的每一个样例与训练集分片中的所有样例计算距离，输出&lt;测试样例， （与训练样例的距离和训练样例的类别）&gt;</p><p>Combiner阶段根据map的输出得到距测试样例最近的K个训练样例，并输出。</p><p>Reduce任务：根据输入得到距测试样例最近的K个训练样例，并按投票原则得到对应的类别，输出到HDFS。</p><p>通过上述KNN在MapReduce中的流程分析产生的I&#x2F;O操作的数量，分析I&#x2F;O操作其实主要就是分析shuffle阶段的操作，具体分析如下：</p><p>1.首先Map端，map任务从HDFS中读取数据分片产生一次读操作。</p><p>2.当map函数处理完成每一条输入产生输出时，会将输出写入到一个默认大小为100M的缓冲区，当缓冲区的数据大小达到阈值（默认为缓冲区大小的80%），便会将缓冲区中的数据溢写到磁盘中，这个过程产生一次写操作。</p><p>3.上述过程会产生大量的溢写的小文件，map任务会将这些文件进行合并，在合并前会调用combiner函数，以减少写到磁盘的数据。这个过程产生一次读和写操作。</p><p>4.Reduce端的输入是若干map任务的map输出，所以在每个map任务完成时，就复制其输出到Reduce端本地磁盘。该过程会产生一次读和写操作。</p><p>5.最后在reduce阶段，直接把数据输入到reduce函数，产生一次读操作。Reduce函数对数据进行处理得到的输出直接写到HDFS中，产生一次写操作。</p><p>综上所述，KNN在mapreduce中的实现至少有4次读操作和4次写操作。</p><p>KNN在Spark中I&#x2F;O操作分析：</p><p>由于Spark是基于内存的计算，所有的计算都在内存中进行。所以通常情况下，Spark任务都只有两次I&#x2F;O操作，一次是读取数据形成RDD，一次是将计算的结果写入文件系统（HDFS）。</p><p>中间的操作都是在内存中进行的。但是如果有shuffle操作且内存不足以容纳所有的数据就可能会有I&#x2F;O操作，在KNN的实现过程中，会有一次shuffle操作，所以可能会有一次读和写操作。综述，KNN在Spark中的实现至多会有两次读和两次写操作，最少会有一次读和一次写操作。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神经网络参数初始化</title>
      <link href="/article/2bc44e46.html"/>
      <url>/article/2bc44e46.html</url>
      
        <content type="html"><![CDATA[<p>        神经网络参数的初始化，在网络层数很深的情况下变得尤为重要。如果参数初始化的过小，很可能导致网络每一层的输出为都接近于0，那么可以这样认为每一层的输入都会很接近于0，在进行反向传播的时候，假如我们要更新某一层的参数W，该层的输出是g（WX）暂且先不考虑偏置项，则求W的梯度就会是：上一层的梯度 * 该层对g的梯度 * X，由于每层的输入都很小所以梯度就会很小，从而导致参数更新很慢，随着层数的增加就会产生梯度消失的现象。我们也可把所有的梯度都连起来看，当进行反向传播的时候，计算某一层的参数梯度为：本层的输出对参数求梯度 * 上一层的梯度，而上一层的梯度中会有上层的权重W这一项（可以自己求一下验证），而W初始化的很小，随着层数的加深，每一层的W累乘，就会导致梯度越来越小直至为0。</p><p>下面是做的一个演示：</p><p>一个10层的神经网络，每一层都使用tanh做为激活函数，数据是1000个从标准正态分布中随机采样得到。</p><p>首先如果每一层的参数如果都初始化的很小：</p><p>W &#x3D; np.random.randn(fan_in, fan_out) * 0.01 #layer initialization</p><p>那么每层输出的均值、标准差和分布如下：</p><p>​​​​<a href="https://img-blog.csdn.net/20180823171618979?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70">https://img-blog.csdn.net/20180823171618979?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70</a><br><a href="https://img-blog.csdn.net/20180823171652159?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70">https://img-blog.csdn.net/20180823171652159?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70</a></p><p>可以看出在第一层的时候还保持着原有数据的分布，但从第二层输出开始数据的分布就逐渐的靠近0，最终均值和标准差都为0。</p><p>那么参数的初始化如果大一些会如何？如果参数初始化的过大，则每一层的输出就会很大，也就是每个神经元都很饱和，如果进行反向传播，考虑激活函数的图像，则对激活函数的梯度就会趋近于0，也会造成梯度消失的情况。下面是参数初始化过大的情况。</p><p>W &#x3D; np.random.randn(fan_in, fan_out) * 1.0 #layer initialization</p><p>一个很好的初始化参数的方法就是使用Xavier initialization，这个方法是Glorot在2010年发表的论文中提出的，该方法初始化的公式为：W &#x3D; np.random.randn(fan_in, fan_out) &#x2F; np.sqrt(fan_in)</p><p>这个公式的目的就是令输出和输入的方差保持一致。具体推导可以在网上有很多，也可以去看论文。</p><p>在使用了Xavier方法初始化后每一层的输出分布如下：</p><p><a href="https://img-blog.csdn.net/20180823172555167?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70">https://img-blog.csdn.net/20180823172555167?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70</a></p><p><a href="https://img-blog.csdn.net/20180823172613617?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70">https://img-blog.csdn.net/20180823172613617?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70</a></p><p>可以看出每一层输出都有较好的分布。</p><p>对于使用relu激活函数，则使用上面的Xavier方法进行初始化效果就不好，这是因为relu激活函数只会激活大约一半的神经元，其他神经元的输出为则为0，那么使用原始的Xavier的公式就会改变原来的方差。每层输出分布如下：</p><p>可以看到，随着层数的加深，每一层的分布越来越向0进行收缩。解决这个问题可以使用如下的式子(He et al.,2015)：</p><p>W &#x3D; np.random.randn(fan_in, fan_out) &#x2F; np.sqrt(fan_in &#x2F; 2)</p><p>由与每次实际上只有大约一半的神经元被激活，相当于只有一半的输入有效，所以在进行参数缩放的时候除以2。</p><p>总之在深度神经网络的实现中，参数的初始化尤为重要。如果要想网络表现的好，训练的快，合适的参数初始化势必不可少的。</p><p>参考资料：cs231n课程</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卷积网络反向传播过程</title>
      <link href="/article/9795e140.html"/>
      <url>/article/9795e140.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20181108152101587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20181108152123679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20181108152139604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20181108152150116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"></p><p>池化层以后补充。</p><pre class="line-numbers language-none"><code class="language-none">def conv_backward(dZ, cache):    &quot;&quot;&quot;    Implement the backward propagation for a convolution function        Arguments:    dZ -- gradient of the cost with respect to the output of the conv layer (Z), numpy array of shape (m, n_H, n_W, n_C)    cache -- cache of values needed for the conv_backward(), output of conv_forward()        Returns:    dA_prev -- gradient of the cost with respect to the input of the conv layer (A_prev),               numpy array of shape (m, n_H_prev, n_W_prev, n_C_prev)    dW -- gradient of the cost with respect to the weights of the conv layer (W)          numpy array of shape (f, f, n_C_prev, n_C)    db -- gradient of the cost with respect to the biases of the conv layer (b)          numpy array of shape (1, 1, 1, n_C)    &quot;&quot;&quot;        ### START CODE HERE ###    # Retrieve information from &quot;cache&quot;    (A_prev, W, b, hparameters) &#x3D; cache        # Retrieve dimensions from A_prev&#39;s shape    (m, n_H_prev, n_W_prev, n_C_prev) &#x3D; A_prev.shape        # Retrieve dimensions from W&#39;s shape    (f, f, n_C_prev, n_C) &#x3D; W.shape        # Retrieve information from &quot;hparameters&quot;    stride &#x3D; hparameters[&#39;stride&#39;]    pad &#x3D; hparameters[&#39;pad&#39;]        # Retrieve dimensions from dZ&#39;s shape    (m, n_H, n_W, n_C) &#x3D; dZ.shape        # Initialize dA_prev, dW, db with the correct shapes    dA_prev &#x3D; np.zeros((m, n_H_prev, n_W_prev, n_C_prev))                               dW &#x3D; np.zeros((f, f, n_C_prev, n_C))    db &#x3D; np.zeros((1, 1, 1, n_C))    # Pad A_prev and dA_prev    A_prev_pad &#x3D; zero_pad(A_prev, pad)    dA_prev_pad &#x3D; zero_pad(dA_prev, pad)        for i in range(m):                       # loop over the training examples                # select ith training example from A_prev_pad and dA_prev_pad        a_prev_pad &#x3D; A_prev_pad[i]        da_prev_pad &#x3D; dA_prev_pad[i]                for h in range(n_H):                   # loop over vertical axis of the output volume            for w in range(n_W):               # loop over horizontal axis of the output volume                for c in range(n_C):           # loop over the channels of the output volume                                        # Find the corners of the current &quot;slice&quot;                    vert_start &#x3D; h * stride                    vert_end &#x3D; vert_start + f                    horiz_start &#x3D; w * stride                    horiz_end &#x3D; horiz_start + f                                        # Use the corners to define the slice from a_prev_pad                    a_slice &#x3D; a_prev_pad[vert_start:vert_end, horiz_start:horiz_end, :]                    # Update gradients for the window and the filter&#39;s parameters using the code formulas given above                    da_prev_pad[vert_start:vert_end, horiz_start:horiz_end, :] +&#x3D; W[:,:,:,c] * dZ[i, h, w, c]                    dW[:,:,:,c] +&#x3D; a_slice * dZ[i, h, w, c]                    db[:,:,:,c] +&#x3D; dZ[i, h, w, c]                            # Set the ith training example&#39;s dA_prev to the unpaded da_prev_pad (Hint: use X[pad:-pad, pad:-pad, :])        dA_prev[i, :, :, :] &#x3D; dA_prev_pad[i, pad:-pad, pad:-pad, :]    ### END CODE HERE ###        # Making sure your output shape is correct    assert(dA_prev.shape &#x3D;&#x3D; (m, n_H_prev, n_W_prev, n_C_prev))        return dA_prev, dW, db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考资料：-吴恩达老师深度学习课后作业。"><a href="#参考资料：-吴恩达老师深度学习课后作业。" class="headerlink" title="参考资料： 吴恩达老师深度学习课后作业。"></a>参考资料： 吴恩达老师深度学习课后作业。</h2>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 梯度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VAE变分自编码器Keras实现</title>
      <link href="/article/3254a3f1.html"/>
      <url>/article/3254a3f1.html</url>
      
        <content type="html"><![CDATA[<p>   <strong>这篇博客用来记录我自己用keras实现(抄写)VAE过程中，掉进的一个坑。。。。。。</strong><br>    最近这几天在网上看了很多VAE的介绍，并且看了一下keras中的实现。自我感觉良好，就想按着官方的代码自己也去写一遍。不写不知道，一写吓一跳！！我跳进了一个很大坑中（笑哭），我在把代码写完以后，开始训练模型，发现代码报出如下错误。</p><pre class="line-numbers language-none"><code class="language-none">InvalidArgumentError: Incompatible shapes: [64,784] vs. [64] [[Node: add_3 &#x3D; Add[T&#x3D;DT_FLOAT, _class&#x3D;[&quot;loc:@training_1&#x2F;Adam&#x2F;gradients&#x2F;add_3_grad&#x2F;Reshape&quot;], _device&#x3D;&quot;&#x2F;job:localhost&#x2F;replica:0&#x2F;task:0&#x2F;device:CPU:0&quot;](logistic_loss_1, Sum_2)]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>   维度不匹配吗这不是，于是我非常认真仔细的开始找错误的原因，找了好久也没发现哪里维度不匹配，我跟keras中实现的VAE开始一行一行的比对自己定义的模型，并且都都把模型的结构都画了出来，发现完全一样，这就让我纳闷了。。。憋的我都想哭。到底哪里出了问题呢？（抓狂）<br>   鬼知道我找了多久，我终于发现了问题所在，原来是重构误差定义的问题，官方中实现的方式是用的from keras.losses import binary_crossentropy中的交叉熵损失，而我用的是K.binary_crossentropy（我是TensorFlow的后端），我把重构误差改成keras中的交叉熵损失后，OK！问题解决。（神清气爽！！）<br>   我查了一下Keras中和TensorFlow中这binary_crossentropy的源码，如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># keras.losses</span><span class="token keyword">def</span> <span class="token function">binary_crossentropy</span><span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> K<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>K<span class="token punctuation">.</span>binary_crossentropy<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># tensorflow 后端</span><span class="token keyword">def</span> <span class="token function">binary_crossentropy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> output<span class="token punctuation">,</span> from_logits<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>sigmoid_cross_entropy_with_logits<span class="token punctuation">(</span>labels<span class="token operator">=</span>target<span class="token punctuation">,</span>                                                   logits<span class="token operator">=</span>output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>keras中虽然也是调用的TensorFlow中的方法，但是它求均值了（<strong>划重点</strong>），当然shape不匹配了。。如果还想继续使用K.binary_crossentropy那么定义重构损失如下:</p><pre class="line-numbers language-none"><code class="language-none">reconstruction_loss &#x3D; K.sum(K.binary_crossentropy(inputs, outputs), axis&#x3D;-1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>官方提供示例中的定义：</p><pre class="line-numbers language-none"><code class="language-none">reconstruction_loss &#x3D; binary_crossentropy(inputs, outputs) * original_dim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于keras中求了平均，所以还得乘以原来的维度，变成求和（何必呢。。。）</p><p>看来以后看代码还得仔细加认真啊。。。。由于现在框架众多，隐藏了太多的细节，所以看一看源码还是很有必要的，要不遇到大坑，都不知道什么情况。（好气啊。。。），努力！！！   </p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> VAE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matplotlib画图:信息熵函数图像</title>
      <link href="/article/6414d8ba.html"/>
      <url>/article/6414d8ba.html</url>
      
        <content type="html"><![CDATA[<p>最近在看GAN和VAE的过程中，发现信息熵的概念多次出现，就又复习了一下。为了更形象的了解信息熵，在网上找信息熵函数图像的过程中，发现只有二元的信息熵图像，出于好奇，画了就画了一下三元的。</p><p>$E &#x3D; -p_1 * log_2p_1 - (1 - p_1) * log_2(1 - p_1)$<br><img src="https://img-blog.csdnimg.cn/20181129104954265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70" alt="二元信息熵函数"><br>$E &#x3D; -p_1 * log_2p_1 - p_2 * log_2p_2 - (1 - p_1 - p_2) * log_2(1 - p_1 - p_2)$<br><img src="https://img-blog.csdnimg.cn/20181129105100534.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70" alt="三元信息熵函数"></p><p>代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding: utf-8</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> mpl_toolkits<span class="token punctuation">.</span>mplot3d <span class="token keyword">import</span> Axes3D<span class="token comment"># 二类信息熵</span><span class="token keyword">def</span> <span class="token function">binary_entropy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> epslion<span class="token operator">=</span><span class="token number">1e-10</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">'''params:   p: A numpy array   epslion: 防止数值溢出'''</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token punctuation">(</span>p <span class="token operator">*</span> np<span class="token punctuation">.</span>log2<span class="token punctuation">(</span>p <span class="token operator">+</span> epslion<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> p<span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>log2<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> p <span class="token operator">+</span> epslion<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 三类信息熵</span><span class="token keyword">def</span> <span class="token function">compute_entropy</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">,</span> epslion<span class="token operator">=</span><span class="token number">1e-10</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">'''params:   p1, p2, p3: A numpy array   epslion: 防止数值溢出'''</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token punctuation">(</span>p1 <span class="token operator">*</span> np<span class="token punctuation">.</span>log2<span class="token punctuation">(</span>p1 <span class="token operator">+</span> epslion<span class="token punctuation">)</span> <span class="token operator">+</span> p2 <span class="token operator">*</span> np<span class="token punctuation">.</span>log2<span class="token punctuation">(</span>p2 <span class="token operator">+</span> epslion<span class="token punctuation">)</span> <span class="token operator">+</span> p3 <span class="token operator">*</span> np<span class="token punctuation">.</span>log2<span class="token punctuation">(</span>p3 <span class="token operator">+</span> epslion<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 二类信息熵图像</span>p1 <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>entropy <span class="token operator">=</span> binary_entropy<span class="token punctuation">(</span>p1<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>p1<span class="token punctuation">,</span> entropy<span class="token punctuation">,</span> <span class="token string">'k-'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'$p_1$'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'E'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'./二类熵函数图像.jpg'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 三类信息熵图像</span>p1 <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span>    <span class="token comment"># 生成网格</span>z <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> x <span class="token operator">-</span> y                <span class="token comment"># p3 = 1- p1 - p2</span>z<span class="token punctuation">[</span>z <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.</span> <span class="token comment"># p1 + p2 >= 1 则p3 = 0</span>E <span class="token operator">=</span> compute_entropy<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> <span class="token number">1e-10</span><span class="token punctuation">)</span>E<span class="token punctuation">[</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>  <span class="token comment"># p1 + p2 > 1 熵值不存在</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>ax <span class="token operator">=</span> Axes3D<span class="token punctuation">(</span>fig<span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot_surface<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> E<span class="token punctuation">,</span> rstride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> cstride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'$p_1$'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'$p_2$'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_zlabel<span class="token punctuation">(</span><span class="token string">'E'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'./三类熵函数图像.jpg'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性回归</title>
      <link href="/article/40997091.html"/>
      <url>/article/40997091.html</url>
      
        <content type="html"><![CDATA[<h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><p>总结一下机器学习中最常见的模型，首先说一下线性回归模型。<br>给定数据集${(x^(i), y^(i))}_{i&#x3D;1}^{N}$,$x^{(i)}$为d维向量，$y^{(i)}$为实数值。我们现在认为所有的$x^{(i)}$与对应的$y^{(i)}$之间存在一种线性关系。所以我们不妨假设: $$\large y &#x3D; wx + b$$  </p><p>其中$y &#x3D; {y^{(1)},y^{(2)}…y^{(N)}}$,$x &#x3D; {x^{(1)},x^{(2)}…x^{(N)}}$, $w$为d维向量， $b$为标量。<br>很显然，当给定了数据集，$x,y$就不会改变。所以我们只要找到最好的$w, b$就找到了$x,y$对应的线性关系。<br>那么如何判断$w,b$是不是最好的呢？现在随机给一组$\hat{w},\hat{b}$,对每一对${x^{(i)},y^{(i)}}$都可以计算出预测的$\hat{y}$。我们的目的是希望预测的$\hat{y}$和真实数据的$y^{(i)}$能够越接近越好。常用的度量方式就是平方误差：$$L^{(i)} &#x3D; (\hat y^{(i)} - y^{(i)})^2$$<br>对于所有的${x^{(i)},y^{(i)}}$我们计算它们的均方误差（mse）：$$Loss &#x3D; \frac{1}{N}\sum_{i&#x3D;0}^{N}\frac{1}{2}(\hat{y}^{(i)} - y^{(i)})^2$$<br>其中乘以1&#x2F;2是为了求导的方便。<br>现在我们只要找到使Loss最小的w,b就能够得到我们想要的模型，常用的优化方法就是梯度下降法。<br>具体的梯度下降法在另一个博客中做了一个总结。<a href="https://blog.csdn.net/qq_26972735/article/details/85049447">https://blog.csdn.net/qq_26972735/article/details/85049447</a><br>当然我们自然会有一个疑惑，为什么要是误差的平方呢？直接求误差，或者3次方4次方什么的不行吗？首先直接求误差肯定不行（因为不同的数据得到的误差有正有负，会互相抵消。），那么换成绝对值呢？也不是不行，只不过绝对值这个数学操作它不可导，所以我们就不能用梯度下降去优化它，也就是说绝对值优化起来会很困难。而3次方4次方什么的也是因为误差抵消的原因以及求导的计算比较复杂，所以我们一般不用。二次方不存在上述的问题，求导简单，并且有其几何意义，因为它就是在向量空间的中的两个点的欧式距离。由于线性回归很简单所以目前就写这么多了。实验网上有很多带图并且很漂亮的介绍，所以没做。日后有想法再补充吧。。。<br>加一个简单的推导过程：<br><img src="https://img-blog.csdnimg.cn/20190314202146502.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20190314202203366.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20190314202213420.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"><br><strong>下一篇总结LogisticRegression。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT1004:Counting Leaves Python DFS</title>
      <link href="/article/2f4483d6.html"/>
      <url>/article/2f4483d6.html</url>
      
        <content type="html"><![CDATA[<p>题目大概意思就是统计一个树中每一层叶节点的个数。<br>节点编号从01开始，程序将其转化为从1开始。最终提交结果（27&#x2F;30）<br><strong>第五个测试点就是不通过！求好心人解答。</strong><br>题目链接：<a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805521431773184">https://pintia.cn/problem-sets/994805342720868352/problems/994805521431773184</a><br><img src="https://img-blog.csdnimg.cn/20190409154407817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20190409155404160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"></p><h4 id="用深度优先搜索遍历整棵树，树采用map存储"><a href="#用深度优先搜索遍历整棵树，树采用map存储" class="headerlink" title="用深度优先搜索遍历整棵树，树采用map存储"></a>用深度优先搜索遍历整棵树，树采用map存储</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  G <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  level <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">101</span>  visted <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">101</span>  <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> degree<span class="token punctuation">)</span><span class="token punctuation">:</span>    visted<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">if</span> G<span class="token punctuation">.</span>get<span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>     <span class="token comment"># 没有子节点</span>      level<span class="token punctuation">[</span>degree<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>      <span class="token keyword">return</span>    <span class="token keyword">for</span> child <span class="token keyword">in</span> G<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>          <span class="token comment"># dfs遍历当前节点的所有子节点</span>      <span class="token keyword">if</span> visted<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        dfs<span class="token punctuation">(</span>child<span class="token punctuation">,</span> degree<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">##########      </span>  N<span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> N <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                       <span class="token comment"># 只有一个节点直接输出1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>                             <span class="token comment"># 初始化树</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">:</span>      node<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token operator">*</span>child_nodes  <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      G<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> child_nodes          dfs<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>     <span class="token comment"># 从根节点开始遍历</span>        leaves <span class="token operator">=</span> N <span class="token operator">-</span> M    count <span class="token operator">=</span> <span class="token number">0</span>    result <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> level<span class="token punctuation">:</span>      result <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>      count<span class="token operator">+=</span>num      <span class="token keyword">if</span> count <span class="token operator">>=</span> leaves<span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 去除首尾的空格</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法 </tag>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hbase学习笔记：通过java最新API操作HBase</title>
      <link href="/article/88713ffb.html"/>
      <url>/article/88713ffb.html</url>
      
        <content type="html"><![CDATA[<p><strong>首先环境为：</strong><br>HBase的版本2.0.1，Hadoop版本2.7.1， JDK1.8</p><p>由于HBase目前网上介绍的API好多已经过时， 这里使用了最新的API，演示了如何创建表，插入数据，获取数据， 删除表几个功能。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HbaseOpreation</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*        旧版API，目前已经deprecated     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createTableOld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//配置ZooKeeper</span>        <span class="token class-name">Configuration</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"hbase.zookeeper.quorum"</span><span class="token punctuation">,</span> <span class="token string">"node1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HBaseAdmin</span> admin <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HBaseAdmin</span><span class="token punctuation">)</span> connection<span class="token punctuation">.</span><span class="token function">getAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建表</span>        <span class="token class-name">HTableDescriptor</span> ht <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTableDescriptor</span><span class="token punctuation">(</span><span class="token class-name">TableName</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"mystudent"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建列族</span>        <span class="token class-name">HColumnDescriptor</span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HColumnDescriptor</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HColumnDescriptor</span> grade <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HColumnDescriptor</span><span class="token punctuation">(</span><span class="token string">"grade"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ht<span class="token punctuation">.</span><span class="token function">addFamily</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>        ht<span class="token punctuation">.</span><span class="token function">addFamily</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建表</span>        admin<span class="token punctuation">.</span><span class="token function">createTable</span><span class="token punctuation">(</span>ht<span class="token punctuation">)</span><span class="token punctuation">;</span>        admin<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*        以下为新的API     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Configuration</span> conf <span class="token operator">=</span> <span class="token class-name">HBaseConfiguration</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"hbase.zookeeper.quorum"</span><span class="token punctuation">,</span> <span class="token string">"node1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取HBase管理员</span>        <span class="token class-name">Admin</span> admin <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建表</span>        <span class="token class-name">TableDescriptorBuilder</span> emp <span class="token operator">=</span> <span class="token class-name">TableDescriptorBuilder</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token class-name">TableName</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加列族信息</span>        <span class="token class-name">ColumnFamilyDescriptor</span> info <span class="token operator">=</span> <span class="token class-name">ColumnFamilyDescriptorBuilder</span>                <span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token class-name">Bytes</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ColumnFamilyDescriptor</span> grade <span class="token operator">=</span> <span class="token class-name">ColumnFamilyDescriptorBuilder</span>                <span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token class-name">Bytes</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"grade"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ColumnFamilyDescriptor</span><span class="token punctuation">></span></span> familes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        familes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>        familes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">;</span>        emp<span class="token punctuation">.</span><span class="token function">setColumnFamilies</span><span class="token punctuation">(</span>familes<span class="token punctuation">)</span><span class="token punctuation">;</span>        admin<span class="token punctuation">.</span><span class="token function">createTable</span><span class="token punctuation">(</span>emp<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        admin<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Configuration</span> conf <span class="token operator">=</span> <span class="token class-name">HBaseConfiguration</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"hbase.zookeeper.quorum"</span><span class="token punctuation">,</span> <span class="token string">"node1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//打开表（获取表的实例）</span>        <span class="token class-name">Table</span> table <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getTable</span><span class="token punctuation">(</span><span class="token class-name">TableName</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//向表内添加2条信息</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Put</span><span class="token punctuation">></span></span> puts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Put</span> put1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Put</span><span class="token punctuation">(</span><span class="token class-name">Bytes</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"stu001"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        put1<span class="token punctuation">.</span><span class="token function">addColumn</span><span class="token punctuation">(</span><span class="token class-name">Bytes</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Bytes</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Bytes</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        put1<span class="token punctuation">.</span><span class="token function">addColumn</span><span class="token punctuation">(</span><span class="token class-name">Bytes</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Bytes</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Bytes</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"13"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Put</span> put2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Put</span><span class="token punctuation">(</span><span class="token class-name">Bytes</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"stu002"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        put2<span class="token punctuation">.</span><span class="token function">addColumn</span><span class="token punctuation">(</span><span class="token class-name">Bytes</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Bytes</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Bytes</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"Steven"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        put2<span class="token punctuation">.</span><span class="token function">addColumn</span><span class="token punctuation">(</span><span class="token class-name">Bytes</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"grade"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Bytes</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"Chinese"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Bytes</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"87"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        puts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>put1<span class="token punctuation">)</span><span class="token punctuation">;</span>        puts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>put2<span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>puts<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//关闭表</span>        table<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Configuration</span> conf <span class="token operator">=</span> <span class="token class-name">HBaseConfiguration</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"hbase.zookeeper.quorum"</span><span class="token punctuation">,</span> <span class="token string">"node1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//打开表（获取表的实例）</span>        <span class="token class-name">Table</span> table <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getTable</span><span class="token punctuation">(</span><span class="token class-name">TableName</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取数据</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Get</span><span class="token punctuation">></span></span> gets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Get</span> stu001 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Get</span><span class="token punctuation">(</span><span class="token class-name">Bytes</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"stu001"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Get</span> stu002 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Get</span><span class="token punctuation">(</span><span class="token class-name">Bytes</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"stu002"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gets<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stu001<span class="token punctuation">)</span><span class="token punctuation">;</span>        gets<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stu002<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Result</span><span class="token punctuation">[</span><span class="token punctuation">]</span> results <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>gets<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//打印</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Result</span> r <span class="token operator">:</span> results<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">Bytes</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Bytes</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Bytes</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//关闭表</span>        table<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testScan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Configuration</span> conf <span class="token operator">=</span> <span class="token class-name">HBaseConfiguration</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"hbase.zookeeper.quorum"</span><span class="token punctuation">,</span> <span class="token string">"node1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//打开表（获取表的实例）</span>        <span class="token class-name">Table</span> table <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getTable</span><span class="token punctuation">(</span><span class="token class-name">TableName</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Scan</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResultScanner</span> results <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">getScanner</span><span class="token punctuation">(</span>scan<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Result</span> r <span class="token operator">:</span> results<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">Bytes</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Bytes</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Bytes</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//关闭表</span>        table<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*        drop table     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDropTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">TableName</span> mystudent <span class="token operator">=</span> <span class="token class-name">TableName</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"mystudent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Configuration</span> conf <span class="token operator">=</span> <span class="token class-name">HBaseConfiguration</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"hbase.zookeeper.quorum"</span><span class="token punctuation">,</span> <span class="token string">"node1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Admin</span> admin <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span><span class="token function">tableExists</span><span class="token punctuation">(</span>mystudent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            admin<span class="token punctuation">.</span><span class="token function">disableTable</span><span class="token punctuation">(</span>mystudent<span class="token punctuation">)</span><span class="token punctuation">;</span>            admin<span class="token punctuation">.</span><span class="token function">deleteTable</span><span class="token punctuation">(</span>mystudent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Delete table sucessed!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Table is not exists!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        admin<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAN基础知识总结</title>
      <link href="/article/77b56fdd.html"/>
      <url>/article/77b56fdd.html</url>
      
        <content type="html"><![CDATA[<h1 id="GAN基础原理总结"><a href="#GAN基础原理总结" class="headerlink" title="GAN基础原理总结"></a><center>GAN基础原理总结</center></h1><p>GAN是由Goodfellow提出的，叫做生成对抗网络，可以生成数据，属于生成模型。自从2014年第一篇GAN的论文提出后，对GAN的研究和改进就一直很火热，关于GAN的最新论文以及相关论文在<a href="https://github.com/hindupuravinash/the-gan-zoo">The GAN Zoo</a>中有非常全的总结。 </p><p>GAN的基本结构分为一个生成器G，和以判别器D。本文主要就是总结一下与GAN有关的基本思想和原理，分析它们是如何训练产生数据的。数据以图像为例。</p><h3 id="生成模型和判别模型"><a href="#生成模型和判别模型" class="headerlink" title="生成模型和判别模型"></a>生成模型和判别模型</h3><p>我们知道GAN属于生成模型，但是什么是生成模型？它是如何定义的呢？下面就用通俗的解释它们两者定义及区别：  </p><blockquote><ul><li>判别模型是学得一个分类面（即学得一个模型），该分类面可用来区分不同的数据分别属于哪一类；</li><li>生成模型是学得各个类别各自的特征（即可看成学得多个模型），可用这些特征数据和要进行分类的数据进行比较，看新数据和学得的模型中哪个最相近，进而确定新数据属于哪一类。</li></ul></blockquote><p><strong>两者的区别就可以总结为：判别模型学的是不同类别间的区别，但并不知道每一类是什么；而生成模型学的是每个类是什么，它知道每一类是什么。</strong></p><p>常见的判别模型：KNN，决策树，逻辑回归，SVM，线性分类器。<br>常见的生成模型：朴素贝叶斯、高斯混合模型、隐马尔可夫模型。</p><p><strong>上面是两种模型的通俗解释，正式一点的来说：</strong></p><p>判别模型：由数据直接学习决策函数Y&#x3D;f(X)或条件概率分布P(Y|X)作为预测模型，即判别模型。判别方法关心的是对于给定的输入X，应该预测什么样的输出Y。</p><p><strong>数据直接学习决策函数Y&#x3D;f(X)或条件概率分布P(Y|X)得到的预测模型，就是判别模型；</strong>  </p><p>生成模型：由数据学习联合概率分布P(X,Y), 然后由P(Y|X)&#x3D;P(X,Y)&#x2F;P(X)求出概率分布P(Y|X)作为预测的模型。该方法表示了给定输入X与产生输出Y的生成关系。</p><p><font color='red' size=3>两者更加具体的区别，以及两种模型详细的比较，参考这篇<a href="https://blog.csdn.net/u010358304/article/details/79748153">博客</a>。</font></p><h2 id="似然"><a href="#似然" class="headerlink" title="似然"></a>似然</h2><p>但凡接触过机器学习的人都知道极大似然，可是从来没有人给我讲过似然具体是什么。这里我就根据网上的介绍加一些自己的看法，解释一下这个似然函数，顺便学习一下概率。  </p><p>根据我的理解，似然函数就是概率，只不过是概率的概率。看起来可能很别扭，但是最终的道理却很简单。  </p><p>首先， 给定输出x时，关于参数θ的似然函数L(θ|x)（在数值上）等于给定参数θ后变量X的概率： </p><p>  $$L(\theta|x) &#x3D; P(X &#x3D; x|\theta)$$</p><p><strong>注意仅仅是在数值上和给定参数$\theta$后的概率，两者在统计学中含义是不同的。</strong>   </p><p>看看百度百科的解释：统计学中，概率描述了已知参数时的随机变量的输出结果；似然则用来描述已知随机变量输出结果时，未知参数的可能取值。</p><p>我是这样理解的，现在有随机变量X,  以及它分布的参数$\theta$。给定$\theta$,这里我们把参数也看做变量。假设我们知道参数$\theta &#x3D; \theta_1$（先验），变量X &#x3D; x（观测结果）的概率表示为:  </p><p>  $$P(X &#x3D; x | \theta&#x3D;\theta_1) $$                                                            </p><p>似然函数的含义为：当知道X &#x3D; x时， 参数取值为$\theta &#x3D; \theta_1$为的概率为多少，可以表示为：  </p><p>  $$P(\theta&#x3D;\theta_1 | X &#x3D; x)$$                                                             </p><p>两者的关系可以通过贝叶斯公式联系起来：$$P(\theta| X) &#x3D; \frac{P(X | \theta)P(\theta)}{P(X)}$$</p><p>因为X为观测变量（可以理解为我们看到的数据），观测数据X对于我们来说是已经存在的事实，所以认为P(X)是不变的，因此  </p><p>  $$P(\theta| X) \propto P(X | \theta)P(\theta)$$</p><p>$P(\theta| X)$就是叫做参数后验， $P(X | \theta)$叫做似然， $P(\theta)$叫做先验。</p><p>在极大似然中， $\arg\max L(\theta | X) &#x3D; P(X | \theta)$, 因为参数后验和似然成正比，所以最大化似然等价于最大化参数后验。</p><p>百度百科中有一个投硬币的例子，这个例子可能会使我们更加理解似然和概率的关系与区别。<a href="https://baike.baidu.com/item/%E4%BC%BC%E7%84%B6%E5%87%BD%E6%95%B0/6011241">似然函数，百度百科</a>。</p><h2 id="隐变量"><a href="#隐变量" class="headerlink" title="隐变量"></a>隐变量</h2><p>对于隐变量的概念，根据我自己的了解，这个名词是在EM算法中先提到的。关于EM算法的问题，这里就不写了（理解不到位）。。。</p><h3 id="生成模型"><a href="#生成模型" class="headerlink" title="生成模型"></a>生成模型</h3><p>生成模型顾名思义就是用来生成数据的。生成模型经过训练后就可以给它一个输入生成我们想要的数据。生成数据的技术在GAN出现之前就已经存在了，比如自动编码器（Auto Encoder），它训练一个编码器和一个解码器，编码器将输入的图像转换为一个编码，解码器将编码转化为image,解码器得到的image和输入input进行比较，让它们越相似越好（一般用MSE衡量）。训练完成后，将解码器单独拿出来，随机输入一个编码，它就会生成一个图像。当然AE生成的图像效果质量很一般，所以后来又提出了VAE这样的模型，效果有所提升，但是目前生成的效果还是不如GAN。</p><p>上面说的生成模型，它们和GAN相比较来说有一个很大的缺点，就是在衡量生成图像和真实图像的相似性上，AE和VAE是用MSE这样的公式来衡量生成图像的好坏，而GAN是用一个判别器D来衡量。目前的实验结果来看，人自己定义的度量方式不如用神经网络定义的好。 </p><h3 id="GAN原理"><a href="#GAN原理" class="headerlink" title="GAN原理"></a>GAN原理</h3><p>GAN有一个生成器G和一个判别器D，给生成器一个固定的随机噪声，它就会生成一张图片样本，判别器就是用来判别这张图片是生成的还是真实的。  </p><p>现在我们有一个图像数据集{$x^{(1)},x^{(2)},…,x^{(n)}$}，假设它们之间是独立同分布的，分布是$P_{data}(x)$,如果可以知道它分布的表达式，就可以直接从$P_{data}(x)$中采样生成数据。但事实是$P_{data}(x)$的具体形式我们根本无法知道。<br>我们假设生成器生成的数据符合分布$P_{G}(x; \theta)$, 其中$\theta$是分布的参数。现在我们从数据集中采样{$x^{(1)},x^{(2)},…,x^{(m)}$}, 我们只要让这m个样本在$P_{G}(x; \theta)$中同时出现的概率最大，这些数据在生成模型同时出现的概率为：$$\prod_{i&#x3D;1}^{m}P_{G}(x^{(i)};\theta)$$根据极大似然理论，要想最大化上面的联合概率，找的最好的$\theta$应为：$$\theta^* &#x3D; arg\max_{\theta} \prod_{i&#x3D;1}^{m}P_{G}(x^{(i)};\theta)$$具体推导如下：</p><p><img src="https://img-blog.csdnimg.cn/20190511142617379.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"></p><p>从上面的推导结果可以看到，极大似然的目标就是令$P_{data}(x)$和$P_{G}(x)$两个分布的KL散度最小。最好的生成器就可表示为:$$G^* &#x3D; arg\min_GDiv(P_G, P_{data})$$但是这里有一个问题，我们要想计算两个分布之间的KL散度，必须知道它们的表达式。可是我们并不知道这两个分布的具体形式。GAN为了解决这个问题用一个判别器D来衡量两个分布之间的差异。具体是这样做的，虽然不知道两个分布的形式，但是上面我们提到了可以从两个分布中采样得到      {$x^{(1)},x^{(2)},…,x^{(m)}$}，{$z^{(1)},z^{(2)},…,z^{(m)}$}，前者服从$P_{data}(x)$后者服从$P_{G}(x)$。为了衡量两个分布距离，最简单的方式为这两个分布的样本之间的距离求平均。GAN用判别器去衡量，判别器的训练可以看做为一个二分类问题，生成样本类别为0，真实样本类别为，判别器最后为一个sigmoid激活，输出0-1间的值，对于生成样本判别器希望给它一个较低的分数，对于真实样本判别器希望给它一个较高的分数。它的目标函数可以表示为： </p><p>$$V(G,D) &#x3D; E_{x -P_{data}}[logD(X)] +  E_{x -P_{G}}[log(1-D(X))]$$</p><p>最优的D可以表示为：$$D^* &#x3D; arg\max_D V(G, D)$$对于生成器来说目标是,固定D以后希望生成的样本可以在D那里获得高的分数，所以最好的生成器可以表示为：  </p><p>  $$G^* &#x3D; arg\min_G E_{x -P_{G}}[log(1-D(X))]$$</p><p>但是原始的论文实验使用的是如下的目标$$G^* &#x3D; arg\min_G -E_{x -P_{G}}[log(D(X))]$$</p><p>论文中还证明了在给定生成器G的前提下，最优判别器:$$D^*(x) &#x3D; \frac{P_{data}}{P_{data} +P_{G}}$$ </p><p>在我们得到最优判别器后将其代入判别器的目标函数V(G, D)得到：  </p><p>$$V(G, D^*) &#x3D; -2log2 + 2JSD(P_{data} || P_{G})$$</p><p><strong>其中JSD表示JS散度。</strong><br>通过上式可以知道，最优判别器D，衡量的就是真实分布$P_{data}$和生成分布$P_{G}$之间的JS散度。<br>在得到最优的D后（D理论上可以衡量两个分布的JS散度）, 为了得到最优生成器G，固定D（D目前是最优的），然后找在D中获得最高分数的G，最优判别器可以表示为：$$arg\min_G\max_D V(G,D)$$<br><em><em>其中$D^</em> &#x3D; \max \limits_{D}V(G, D)$</em>*  </p><p>由上面的优化过程得到，为了使判别器可以比较好的估计两个分布的JS散度，我们理论上应该将D训练到最优以后，再去优化生成器。但是实际实验却往往会多次训练生成器G（不知道为什么）。<br>综上所述生成器G的目标和判别器D的目标可以看出，D的目标是想给生成数据低分给真实数据高分，而生成器是想D给生成数据高分，这在训练两者的时候就产生了对抗。具体算法如下：</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p><img src="https://img-blog.csdnimg.cn/20190511142657551.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"></p><p><strong>算法的过程上图已经展示，具体过程如下：</strong></p><blockquote><ul><li>重复迭代下面步骤：<blockquote><ul><li>重复k次下述步骤：（为了令判别器D能够很好的估计生成分布$P_G$和真实分布$P_{data}$之间的JS散度）<blockquote><ol><li>从真实的数据中采样m个样本。</li><li>从一个先验分布中随机产生m个噪声。</li><li>将m个噪声通过生成器，映射到与真实数据相同的空间。</li><li>固定生成器，将生成的样本和真实的样本输入到判别器D中，优化D，让D给真实样本高分，给生成样本低分。</li></ol></blockquote></li></ul></blockquote></li></ul></blockquote><pre><code> &gt;&gt;* 在D训练好后，从一个先验分布中随机产生m个噪声样本。 &gt;&gt;* 将噪声样本通过生成器映射到真实样本空间。 &gt;&gt;* 固定判别器D，优化生成器G，使判别器能够给生成样本高的分数。</code></pre><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><p>代码地址：<a href="https://github.com/jiaxingqi/DeepLearning/tree/master/GAN">https://github.com/jiaxingqi/DeepLearning/tree/master/GAN</a><br>生成器和判别器都使用的是MLP。数据集使用的mnist数据集，最后迭代40次后结果如下：<br><img src="https://img-blog.csdnimg.cn/20190511142722403.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"></p><p><strong>训练过程中的Loss曲线如下图，蓝色为判别器，绿色为生成器。我们可以看到，两者随着迭代次数的增加达到一种平衡。</strong></p><p><img src="https://img-blog.csdnimg.cn/20190511142746946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>[1] <a href="http://speech.ee.ntu.edu.tw/~tlkagk/courses_MLDS18.html">Machine Learning and having it deep and structured (2018,Spring)</a>. 李宏毅，台湾大学.<br>[2] <a href="https://arxiv.org/abs/1406.2661">Goodfellow, Ian J., et al. “Generative Adversarial Networks.” Advances in Neural Information Processing Systems 3(2014):2672-2680.</a><br>[3] <a href="https://blog.csdn.net/u010358304/article/details/79748153">生成模型 VS 判别模型 （含义、区别、对应经典算法）</a> CSDN博客<br>[4] <a href="https://baike.baidu.com/item/%E4%BC%BC%E7%84%B6%E5%87%BD%E6%95%B0/6011241">百度百科， 似然函数</a><br>[5] <a href="https://www.zhihu.com/question/24261751/answer/158547500">知乎， 先验分布、后验分布、似然估计这几个概念是什么意思，它们之间的关系是什么？</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GAN </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>历年英语四级高频单词统计</title>
      <link href="/article/d4064251.html"/>
      <url>/article/d4064251.html</url>
      
        <content type="html"><![CDATA[<p>#四级单词版wordcount</p><p>下载运行完就可以得到最近几年四级阅读理解高频单词。也可以自己收集其他数据进行统计<br>github:<a href="https://github.com/xichie/pythonCode">https://github.com/xichie/pythonCode</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> rebase_path <span class="token operator">=</span> <span class="token string">'./data/'</span>filenames <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>base_path<span class="token punctuation">)</span>all_words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>stat <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment"># load data</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"loading data..."</span><span class="token punctuation">)</span><span class="token keyword">for</span> fn <span class="token keyword">in</span> filenames<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>base_path<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        context <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> context<span class="token punctuation">:</span>        words <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> word <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">:</span>            words<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># filter letter and ignore case </span>        all_words<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token comment"># wordcount</span><span class="token keyword">for</span> word <span class="token keyword">in</span> all_words<span class="token punctuation">:</span>    stat<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> stat<span class="token punctuation">.</span>get<span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>word_count <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>stat<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> d<span class="token punctuation">:</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># save result</span>totol_words <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./result.csv'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> word_num <span class="token keyword">in</span> word_count<span class="token punctuation">:</span>        totol_words <span class="token operator">+=</span> word_num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>word_num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>word_num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>totol_words<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电梯调度问题求解</title>
      <link href="/article/868c5d01.html"/>
      <url>/article/868c5d01.html</url>
      
        <content type="html"><![CDATA[<h1 id="编程之美题目记录：-小飞的电梯调度算法"><a href="#编程之美题目记录：-小飞的电梯调度算法" class="headerlink" title="编程之美题目记录： 小飞的电梯调度算法"></a>编程之美题目记录： 小飞的电梯调度算法</h1><h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>一栋楼共有N层，电梯从一层往上走，只允许停在其中某一层，所有乘客都从一楼上电梯,到达某层楼后，所有乘客从这一层爬楼梯道自己的目的层。在一楼时，每个乘客选择自己的目的层，电梯自动计算出应停的楼层。<br><strong>问：电梯停在哪一层楼，能够保证这次乘坐电梯的所有乘客爬楼梯的层数之和最少。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 解法1：暴力求解， 从第一层开始遍历，得到爬楼梯最少的楼层（时间复杂度O(N^2)）</span>nPerson <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># nPerson[i]表示到第i层的乘客数目</span>nFloor  <span class="token operator">=</span> nMinFloor  <span class="token operator">=</span> <span class="token number">0</span>nTargetFloor <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>N <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nPerson<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment"># 楼层数</span><span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    nFloor <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        nFloor <span class="token operator">+=</span> nPerson<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> j<span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        nFloor <span class="token operator">+=</span> nPerson<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> n<span class="token punctuation">)</span>    <span class="token keyword">if</span> nTargetFloor <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">or</span> nMinFloor <span class="token operator">></span> nFloor<span class="token punctuation">:</span>        nMinFloor <span class="token operator">=</span> nFloor        nTargetFloor <span class="token operator">=</span> n<span class="token keyword">print</span><span class="token punctuation">(</span>nTargetFloor<span class="token punctuation">,</span> nMinFloor<span class="token punctuation">)</span><span class="token comment"># 解法2 时间复杂度：O(N)</span><span class="token triple-quoted-string string">'''    思路：        假设电梯停在第i层楼， 计算出所有乘客总共要爬的层数Y, 如果有N1个乘客目的地在i层以下、        有N2个乘客在i层， N3个乘客在i层以上。        这时如果电梯改停在i-1层， 则N1个乘客少爬一层，N2个乘客多爬一层， N3个乘客多爬一层。        则i-1层时乘客总共要爬的层数为：Y +(N2 + N3 - N1)        如果电梯改停在i+1层，则N1个乘客多爬一层，N2个乘客多爬一层，N3个乘客少爬一层。则i+1层时        乘客总共要爬的层数为：Y + (N1 + N2 - N3)        综上分析：如果N1 > N2 + N3, 则电梯停在i-1层好，                如果N3 > N1 + N2, 则电梯停在i+1层好。'''</span>nPerson <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># nPerson[i]表示到第i层的乘客数目</span>nMinFloor <span class="token operator">=</span> <span class="token number">0</span>N1 <span class="token operator">=</span> N3 <span class="token operator">=</span> <span class="token number">0</span>N2 <span class="token operator">=</span> nPerson<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>nTargetFloor <span class="token operator">=</span> <span class="token number">1</span>N <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nPerson<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment"># 楼层数</span><span class="token comment"># 电梯停在1楼，需要爬多少楼梯</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    N3 <span class="token operator">+=</span> nPerson<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    nMinFloor <span class="token operator">+=</span> nPerson<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 根据策略迭代</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>N1 <span class="token operator">+</span> N2<span class="token punctuation">)</span> <span class="token operator">&lt;</span> N3<span class="token punctuation">:</span>        nTargetFloor <span class="token operator">=</span> i        nMinFloor <span class="token operator">+=</span> N1 <span class="token operator">+</span> N2 <span class="token operator">-</span> N3        N1 <span class="token operator">+=</span> N2        N2 <span class="token operator">=</span> nPerson<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        N3 <span class="token operator">-=</span> nPerson<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span>nTargetFloor<span class="token punctuation">,</span> nMinFloor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Latex+VScode配置方法，以及bibtex导入中文文献的问题</title>
      <link href="/article/b6592798.html"/>
      <url>/article/b6592798.html</url>
      
        <content type="html"><![CDATA[<p>最近要写开题报告，一开始用word写，还是那个问题，格式什么的弄得我头疼。心想后面有论文要写，所以准备用latex。<br>原来一直在用vscode，所以网上搜了很多vscode配置latex环境的教程。所以在这里做一个详细的记录，希望对和我一样的人有所帮助。</p><p><strong>环境：win10+vscode+CTeX_2.9.2.164_Full</strong></p><h2 id="下载CTex"><a href="#下载CTex" class="headerlink" title="下载CTex"></a>下载CTex</h2><p>由于我也不太懂latex原理，反正凑合着会用。所以没试过别的环境。用的是清华的镜像，下载地址：<a href="http://www.ctex.org/CTeXDownload/%E3%80%82">http://www.ctex.org/CTeXDownload/。</a> 下载带full的那个，包比较全，省好多事儿。</p><h2 id="下载VScode"><a href="#下载VScode" class="headerlink" title="下载VScode"></a>下载VScode</h2><p>地址：<a href="https://code.visualstudio.com/%E3%80%82">https://code.visualstudio.com/。</a> 微软的编辑器，在windows上的好处我不多说了。安装不要太简单，也没啥说的。</p><h2 id="安装CTex"><a href="#安装CTex" class="headerlink" title="安装CTex"></a>安装CTex</h2><p>我的安装方式就是，点开安装包，下一步点到底，全默认的。安装的过程可能比较慢，建议边安装，边进行下面的过程。</p><h2 id="配置VSCode环境"><a href="#配置VSCode环境" class="headerlink" title="配置VSCode环境"></a>配置VSCode环境</h2><p>先安装如下图所示的插件，只需要安装第2个和第3个就可以。<br><img src="https://img-blog.csdnimg.cn/20190622133124840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后打开vscode的配置文件（vscode的左下角蓝色圈圈那个位置，点击<strong>设置</strong>进入配置文件）如图：</p><p><img src="https://img-blog.csdnimg.cn/20190622134346401.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后点击上图右上角红色圈住的图标，进入配置文件（json格式的），如图：</p><p><img src="https://img-blog.csdnimg.cn/20190622134555491.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>把下面的配置复制进去，就可以。</p><pre class="line-numbers language-none"><code class="language-none">&#123;    &quot;git.ignoreMissingGitWarning&quot;: true,    &quot;files.autoSave&quot;: &quot;afterDelay&quot;,    &quot;editor.fontSize&quot;: 16,    &quot;editor.fontFamily&quot;: &quot;&#39;Courier New&#39;&quot;,    &quot;editor.wordWrap&quot;: &quot;on&quot;,    &#x2F;&#x2F; latex    &quot;latex-workshop.latex.recipes&quot;: [    &#123;        &quot;name&quot;: &quot;pdflatex -&gt; bibtex -&gt; pdflatex*2&quot;,        &quot;tools&quot;: [            &quot;pdflatex&quot;,            &quot;bibtex&quot;,            &quot;pdflatex&quot;,            &quot;pdflatex&quot;        ]    &#125;    ],    &quot;latex-workshop.latex.tools&quot;: [&#123;        &quot;name&quot;: &quot;latexmk&quot;,        &quot;command&quot;: &quot;latexmk&quot;,        &quot;args&quot;: [            &quot;-synctex&#x3D;1&quot;,            &quot;-interaction&#x3D;nonstopmode&quot;,            &quot;-file-line-error&quot;,            &quot;-pdf&quot;,            &quot;%DOC%&quot;        ]    &#125;, &#123;        &quot;name&quot;: &quot;xelatex&quot;,        &quot;command&quot;: &quot;xelatex&quot;,        &quot;args&quot;: [            &quot;-synctex&#x3D;1&quot;,            &quot;-interaction&#x3D;nonstopmode&quot;,            &quot;-file-line-error&quot;,            &quot;%DOC%&quot;        ]    &#125;, &#123;        &quot;name&quot;: &quot;pdflatex&quot;,        &quot;command&quot;: &quot;pdflatex&quot;,        &quot;args&quot;: [            &quot;-synctex&#x3D;1&quot;,            &quot;-interaction&#x3D;nonstopmode&quot;,            &quot;-file-line-error&quot;,            &quot;%DOC%&quot;        ]    &#125;, &#123;        &quot;name&quot;: &quot;bibtex&quot;,        &quot;command&quot;: &quot;bibtex&quot;,        &quot;args&quot;: [            &quot;%DOCFILE%&quot;        ]    &#125;],    &quot;latex-workshop.view.pdf.viewer&quot;: &quot;tab&quot;,    &quot;latex-workshop.view.pdf.hand&quot;: true,    &quot;latex-workshop.latex.autoBuild.run&quot;: &quot;onFileChange&quot;,    &quot;latex-workshop.latex.clean.fileTypes&quot;: [        &quot;.aux&quot;,        &quot;.bbl&quot;,        &quot;.blg&quot;,        &quot;.idx&quot;,        &quot;.ind&quot;,        &quot;.lof&quot;,        &quot;.lot&quot;,        &quot;.out&quot;,        &quot;.toc&quot;,        &quot;.acn&quot;,        &quot;.acr&quot;,        &quot;.alg&quot;,        &quot;.glg&quot;,        &quot;.glo&quot;,        &quot;.gls&quot;,        &quot;.ist&quot;,        &quot;.fls&quot;,        &quot;.log&quot;,        &quot;.spl&quot;,        &quot;.synctex.gz&quot;,        &quot;*.fdb_latexmk&quot;    ],    &quot;latex-workshop.latex.autoClean.run&quot;: &quot;onBuilt&quot;,&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ok！vscode环境就配置好了！</strong>下面就等着CTex安装完毕，CTex安装完后，应该会自动配置系统的环境变量（没有的话，可以自己配置一下）。如图：<br><img src="https://img-blog.csdnimg.cn/20190622135009307.png" alt="在这里插入图片描述"></p><h2 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h2><p>最后效果如下图：可以边写，边看效果。编译速度还是可以的。<br><img src="https://img-blog.csdnimg.cn/20190622135604554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>还没完！！！，还有一些关于latex导入中文文献的问题。</strong></p><h2 id="Bibtex导入中文文献的问题"><a href="#Bibtex导入中文文献的问题" class="headerlink" title="Bibtex导入中文文献的问题"></a>Bibtex导入中文文献的问题</h2><p>关于如何使用Bibtex导入文献的问题，这里我做一个简单的介绍：<br>首先在你的 <strong>.tex</strong> 文件在目录下，创建一个后缀为 <strong>.bib</strong> 的文件，比如叫：<strong>ref.bib</strong>。<br>在你的 <strong>.tex</strong> 文件中 <strong>\end{document}</strong> 前面加入下面两行：</p><pre class="line-numbers language-none"><code class="language-none">\bibliographystyle&#123;ieeetr&#125;       %这里是参考文献的引用格式，可以自定义。\bibliography&#123;ref&#125;       %这里是你自己的.bib文件的名字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后我们通过google学术（没梯子的可以用镜像：）或者百度学术，搜索我们引用的论文：<br><img src="https://img-blog.csdnimg.cn/20190622141223288.png" alt="在这里插入图片描述"><br>点击下面的双引号，出现：<br><img src="https://img-blog.csdnimg.cn/20190622141321153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们选择Bibtex，将出现的网页上的内容复制，粘贴到自己创建的.bib文件中就行。<br><img src="https://img-blog.csdnimg.cn/2019062214143375.png" alt="在这里插入图片描述"><br>在.tex中，导入参考文献相应的包：</p><pre class="line-numbers language-none"><code class="language-none">\usepackage&#123;cite&#125;\newcommand&#123;\upcite&#125;[1]&#123;\textsuperscript&#123;\textsuperscript&#123;\cite&#123;#1&#125;&#125;&#125;&#125; %参考文献上标<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>引用格式：</p><pre class="line-numbers language-none"><code class="language-none">\begin&#123;document&#125;\maketitle          %添加这一句才能够显示标题等信息我爱你，中国！！！\upcite&#123;wu2008fast&#125;中文文献\upcite&#123;meng&#125;\bibliographystyle&#123;ieeetr&#125;\bibliography&#123;ref&#125; \end&#123;document&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果：<br><img src="https://img-blog.csdnimg.cn/20190622143118919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="我们可以看到，对于中文参考文献，如果用ieeetr等默认的格式，就会有问题。"><a href="#我们可以看到，对于中文参考文献，如果用ieeetr等默认的格式，就会有问题。" class="headerlink" title="我们可以看到，对于中文参考文献，如果用ieeetr等默认的格式，就会有问题。"></a>我们可以看到，对于中文参考文献，如果用ieeetr等默认的格式，就会有问题。</h4><p>这里我找到了一个模板，可以下载下来：<a href="https://raw.githubusercontent.com/Haixing-Hu/GBT7714-2005-BibTeX-Style/master/gbt7714-2005.bst">https://raw.githubusercontent.com/Haixing-Hu/GBT7714-2005-BibTeX-Style/master/gbt7714-2005.bst</a> 直接复制保存为.bst文件就行。比如叫chinese.bst<br>然后将这个bst文件放到和你的.tex文件同一目录下，只需要更改bst文件的引用就行：</p><pre class="line-numbers language-none"><code class="language-none">\bibliographystyle&#123;chinese.bst&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并且参考文献的标题是英文的，如果想改成中文，在文件开头加入下面的代码</p><pre class="line-numbers language-none"><code class="language-none">\renewcommand\refname&#123;参考文献&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果如图：</p><p><img src="https://img-blog.csdnimg.cn/20190622143401674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，latex+vscode的环境就算配置好了，其它如果有关于latex格式的问题，可以直接百度，基本上都能轻松搞定。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://liam.page/2014/05/09/gbt7714-2005-bibtex-style/">https://liam.page/2014/05/09/gbt7714-2005-bibtex-style/</a><br>[2] <a href="https://www.jianshu.com/p/dc0ffa4368e3">https://www.jianshu.com/p/dc0ffa4368e3</a></p>]]></content>
      
      
      <categories>
          
          <category> 日常笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDFS实时上传文件夹中的数据文件</title>
      <link href="/article/c39328c.html"/>
      <url>/article/c39328c.html</url>
      
        <content type="html"><![CDATA[<p>需求：<br>编写一个脚本，监控一个文件夹，当有文件加入将其上传到HDFS。</p><p>步骤：</p><ol><li>记录已经上传过的文件</li><li>获取文件夹下所有数据文件</li><li>判断是否已经上传，如果没有，上传，并记录</li></ol><p>python脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">from</span> subprocess <span class="token keyword">import</span> call<span class="token keyword">import</span> argparseparser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">)</span>args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>old_files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>path <span class="token operator">=</span> args<span class="token punctuation">.</span>path<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    files <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> files<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">file</span> <span class="token keyword">not</span> <span class="token keyword">in</span> old_files<span class="token punctuation">:</span>            ret_code <span class="token operator">=</span> call<span class="token punctuation">(</span><span class="token string">'hdfs dfs -put %s /qjx/test'</span> <span class="token operator">%</span><span class="token builtin">file</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'code:%s, filename:%s'</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>ret_code<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            old_files<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT1003:我要通过（C语言）</title>
      <link href="/article/67219ddd.html"/>
      <url>/article/67219ddd.html</url>
      
        <content type="html"><![CDATA[<p>网上已经有很多解析了，就不废话了。<br>主要注意一下几点：</p><ol><li>P、A、T三个字符都要出现。（测试点2）</li><li>P、T仅且出现一次。</li><li>P在T之前。</li><li>P和T之间至少有一个A。</li><li>P左边A的数量 * P和T之间A的数量 &#x3D; T右边A的数量。</li></ol><p>代码简单易懂，就是判断上面几个条件。</p><pre><code class="c">#include &lt;stdio.h&gt;int isRight(char *s)&#123;    int i = 0,j = 0, count_p = 0, count_t = 0;    int arr[3] = &#123;0&#125;;    while(s[i] != &#39;\0&#39;)    &#123;        switch(s[i])        &#123;        case &#39;A&#39;:            if(j &gt; 2)            &#123;                return 0;            &#125;            arr[j] += 1;            break;        case &#39;P&#39;:            count_p++;            if(count_p &gt; 1 || j &gt;= 1)            &#123;                return 0;            &#125;            j++;            break;        case &#39;T&#39;:            count_t++;            if(count_t &gt; 1 || j &lt; 1)            &#123;                return 0;            &#125;            j++;            break;        default:            return 0;        &#125;        i++;    &#125;    if(arr[1] != 0 &amp;&amp; arr[0] * arr[1] == arr[2] &amp;&amp; count_t &amp;&amp; count_p)    &#123;        return 1;    &#125;    return 0;&#125;int main()&#123;    int n, i;    char str[100];    scanf(&quot;%d&quot;, &amp;n);    for(i = 0; i &lt; n; i++)    &#123;        scanf(&quot;%s&quot;, str);        if(isRight(str))        &#123;            printf(&quot;YES\n&quot;);        &#125;        else        &#123;            printf(&quot;NO\n&quot;);        &#125;    &#125;    return 0;&#125;```</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言 </tag>
            
            <tag> 算法 </tag>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级1004:成绩排名（C语言）</title>
      <link href="/article/c9691e3d.html"/>
      <url>/article/c9691e3d.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">info</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> sname<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//注意是11个字符，多余的1位为'\0'。</span><span class="token keyword">char</span> sno<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> score<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>INFO<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">infoSort</span><span class="token punctuation">(</span>INFO <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>INFO tmp<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">></span> p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tmp <span class="token operator">=</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>INFO <span class="token operator">*</span>students <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>students <span class="token operator">=</span> <span class="token punctuation">(</span>INFO <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>INFO<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s %s %d"</span><span class="token punctuation">,</span> students<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sname<span class="token punctuation">,</span> students<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sno<span class="token punctuation">,</span> <span class="token operator">&amp;</span>students<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">infoSort</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %s\n"</span><span class="token punctuation">,</span> students<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sname<span class="token punctuation">,</span> students<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sno<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %s\n"</span><span class="token punctuation">,</span> students<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sname<span class="token punctuation">,</span> students<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sno<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言 </tag>
            
            <tag> 算法 </tag>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级1005:继续3n+1猜想（C语言）</title>
      <link href="/article/5115e63e.html"/>
      <url>/article/5115e63e.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> i <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tmp <span class="token operator">=</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>arr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>flag <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>ans<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>arr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>flag <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>tmp <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tmp <span class="token operator">=</span> <span class="token punctuation">(</span>tmp<span class="token operator">*</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>tmp <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">==</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言 </tag>
            
            <tag> 算法 </tag>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级1006:换个格式输出（c语言）</title>
      <link href="/article/5fd31a43.html"/>
      <url>/article/5fd31a43.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20191229180921253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> len<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'\0'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \\最大是三位数，位数<span class="token operator">+</span><span class="token number">1</span>，最后一位存<span class="token char">'\0'</span>。<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>j <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>i <span class="token operator">=</span> n <span class="token operator">/</span> j<span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">100</span><span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"S"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>n <span class="token operator">=</span> n <span class="token operator">%</span> j<span class="token punctuation">;</span>j <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言 </tag>
            
            <tag> 算法 </tag>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级1007:素数对猜想（C语言）</title>
      <link href="/article/c0b5f4e4.html"/>
      <url>/article/c0b5f4e4.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span>tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> tmp<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> p1<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> p2<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPrime</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p1 <span class="token operator">=</span> p2<span class="token punctuation">;</span>p2 <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>p2 <span class="token operator">-</span> p1 <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言 </tag>
            
            <tag> 算法 </tag>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级1008:数组循环右移问题（C语言）</title>
      <link href="/article/cee7cd2a.html"/>
      <url>/article/cee7cd2a.html</url>
      
        <content type="html"><![CDATA[<p>第一次提交测试点2没通过。<br>试了半天，发现是当m &gt; n的情况没有考虑到。<br>所以代码加了一行m &#x3D; m % n。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m <span class="token operator">=</span> m <span class="token operator">%</span> n<span class="token punctuation">;</span>    <span class="token comment">//当m >= n时</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> m<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言 </tag>
            
            <tag> 算法 </tag>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1001（C语言）</title>
      <link href="/article/483d7701.html"/>
      <url>/article/483d7701.html</url>
      
        <content type="html"><![CDATA[<p>注意几种情况：</p><p>a+b &#x3D; 0<br>a+b &#x3D; -10或-100或-1000<br>a+b &#x3D; 1000或10000</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> group<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> len<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>sum <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'-'</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>group <span class="token operator">=</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> group<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>group <span class="token operator">=</span> len <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> group<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>group <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> group <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言 </tag>
            
            <tag> 算法 </tag>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1002:A+B for Polynomials（C语言）</title>
      <link href="/article/a25b8781.html"/>
      <url>/article/a25b8781.html</url>
      
        <content type="html"><![CDATA[<p>笨方法：创建一个结构体保存指数和系数。<br>测试点：</p><ul><li>系数为0的情况。不计入项数，也不输出。</li><li>输出格式的问题</li><li></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX</span> <span class="token expression"><span class="token number">20</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">num</span><span class="token punctuation">&#123;</span><span class="token comment">// n^m</span><span class="token keyword">double</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>NUM<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>NUM a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>NUM tmp<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k<span class="token operator">-</span> i <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>m <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tmp <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>NUM a<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span>NUM b<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> q<span class="token punctuation">,</span> flag<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 合并相同指数的项，存入结构体数组b中</span><span class="token comment">// flag标记是否发生合并</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>q <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> q <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> q<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">.</span>m <span class="token operator">==</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>b<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">.</span>n <span class="token operator">+=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token punctuation">;</span>flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>b<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 按指数降序排序</span><span class="token comment">//i统计系数非零项的数量</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出系数非零项的数量</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出系数非零的项</span><span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %.1f"</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单的方法：创建一个1001大小的数组，索引为指数，值为系数。然后统计输出即可。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">double</span> a<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0.0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> tmp<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1001</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %.1lf"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言 </tag>
            
            <tag> 算法 </tag>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级1009:说反话(C语言)</title>
      <link href="/article/e2c19da6.html"/>
      <url>/article/e2c19da6.html</url>
      
        <content type="html"><![CDATA[<p><strong>解题方法就是创建一个二维字符串数组，将读取的单词保存到数组中，然后倒序输出。经过测试，所有的测试样例，单词的数量最多为8个，单词的长度最大为10。</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> len<span class="token punctuation">;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token char">'\0'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span>len<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>len <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//最后一位是字符串结束符</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言 </tag>
            
            <tag> 算法 </tag>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级1010:一元多项式求导（C语言）</title>
      <link href="/article/39366583.html"/>
      <url>/article/39366583.html</url>
      
        <content type="html"><![CDATA[<p>注意点：</p><ol><li>只要判断第一项求导后是否为零多项式。如果是，输出0 0；否则，依次输出求导后非零多项式。</li><li>输出格式问题，最后不要带空格。</li></ol><p>不通过可以试试这两个测试用例：</p><ul><li>输入：2 3 0 2 0 1</li><li>输出：6 2 0 1 0 0            </li><li>输入： 0 1</li><li>输出： 0 0</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">*</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> i <span class="token operator">*</span> j<span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> i <span class="token operator">*</span> j<span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言 </tag>
            
            <tag> 算法 </tag>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级1011:A+B和C（C语言）</title>
      <link href="/article/5756a91f.html"/>
      <url>/article/5756a91f.html</url>
      
        <content type="html"><![CDATA[<p>不知道这个题考的知识点是什么。。。。。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span> i<span class="token punctuation">;</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf %lf %lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case #%d: true\n"</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case #%d: false\n"</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言 </tag>
            
            <tag> 算法 </tag>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级1012:数字分类（C语言）</title>
      <link href="/article/6f972fee.html"/>
      <url>/article/6f972fee.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> x<span class="token punctuation">,</span> i<span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> flag<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+=</span>x<span class="token punctuation">;</span>flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>k <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> k  <span class="token operator">*</span> x<span class="token punctuation">;</span> flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>flag<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>count<span class="token operator">++</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+=</span> x<span class="token punctuation">;</span>flag<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>flag<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"N"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.1lf"</span><span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token operator">*</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">!=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"N"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言 </tag>
            
            <tag> 算法 </tag>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级1013:数素数（C语言）</title>
      <link href="/article/148dc80a.html"/>
      <url>/article/148dc80a.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>注意：</p><ul><li>超时问题。 判断是否为素数的函数里求该数的平方根，减少时间。</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> tmp<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPrime</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">>=</span> m <span class="token operator">&amp;&amp;</span> count <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言 </tag>
            
            <tag> 算法 </tag>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级1014:福尔摩斯的约会（C语言）</title>
      <link href="/article/5e99c580.html"/>
      <url>/article/5e99c580.html</url>
      
        <content type="html"><![CDATA[<p>到现在题目也没搞太明白，反正通过了。下面我的理解。<br>注意：<br>判断小时数：题目中说是第2对相同字符，应该是星期数后面的相同的字符，并且要满足：</p><ul><li>是数字或则A~N之间。</li></ul><p>如果是从头开始的第二个满足条件的字符，比如：</p><ul><li>3485djDkxh4hhGE </li><li>2985akDfkkkkggEdsb<br>这两个字符串，第2个满足条件的字符是5，但小时数应该是字符E（星期数D的后一个满足条件的字符）。<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'\0'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> len<span class="token punctuation">,</span> i<span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token char">'A'</span> <span class="token operator">&amp;&amp;</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">'G'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token char">'A'</span> <span class="token operator">&amp;&amp;</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">'N'</span> <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> <span class="token function">cmp2</span><span class="token punctuation">(</span><span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> len<span class="token punctuation">,</span> i<span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token punctuation">;</span>len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">islower</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>c <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isupper</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>c <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s2<span class="token punctuation">[</span><span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s3<span class="token punctuation">[</span><span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s4<span class="token punctuation">[</span><span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> day<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"SUN"</span><span class="token punctuation">,</span> <span class="token string">"MON"</span><span class="token punctuation">,</span> <span class="token string">"TUE"</span><span class="token punctuation">,</span> <span class="token string">"WED"</span><span class="token punctuation">,</span> <span class="token string">"THU"</span><span class="token punctuation">,</span> <span class="token string">"FRI"</span><span class="token punctuation">,</span> <span class="token string">"SAT"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> c<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token function">cmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'A'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>j <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>j <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'A'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>c <span class="token operator">=</span> <span class="token function">cmp2</span><span class="token punctuation">(</span>s3<span class="token punctuation">,</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span>k <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>c <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %02d:%02d\n"</span><span class="token punctuation">,</span> day<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言 </tag>
            
            <tag> 算法 </tag>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读取带标点的英文段落，分词、去重按字典顺序输出(C语言)</title>
      <link href="/article/bcf8358e.html"/>
      <url>/article/bcf8358e.html</url>
      
        <content type="html"><![CDATA[<p>例如：<br>输入：<br>I love Beijing.<br>I Love China.<br>Oh,Beijing is the capital of China.<br>Do you know?<br>Cheer up!!<br>输出：<br>Beijing<br>Cheer<br>China<br>Do<br>I<br>Love<br>Oh<br>capital<br>is<br>know<br>love<br>of<br>the<br>up<br>you</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'\0'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> i <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"\0"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> count<span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"data.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isalpha</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sort</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言 </tag>
            
            <tag> 算法 </tag>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP学习笔记</title>
      <link href="/article/5f366732.html"/>
      <url>/article/5f366732.html</url>
      
        <content type="html"><![CDATA[<h1 id="Jsp介绍："><a href="#Jsp介绍：" class="headerlink" title="Jsp介绍："></a>Jsp介绍：</h1><p>jsp(java server pages)本质上就是一个servlet。而servlet是一个运行在服务器端的小程序，可以生成动态的内容。jsp可以将内容的生成和显示分离。</p><h1 id="jsp组成："><a href="#jsp组成：" class="headerlink" title="jsp组成："></a>jsp组成：</h1><p>html+java代码+jsp标签。</p><h1 id="jsp脚本："><a href="#jsp脚本：" class="headerlink" title="jsp脚本："></a>jsp脚本：</h1><ol><li>&lt;%代码 %&gt;：java代码片段。（代码会在_jspService方法中）</li><li>&lt;%&#x3D;代码%&gt;：脚本表达式输出，不能以分号结尾。（代码会在_jspService方法中）</li><li>&lt;%!代码%&gt;：声明表达式。（全局的变量或方法）</li></ol><h1 id="jsp注释："><a href="#jsp注释：" class="headerlink" title="jsp注释："></a>jsp注释：</h1><ol><li>html注释（面试题）<br> &amp;emsp; 内容会编译,java原码中会有,页面上不体现。<strong>因为html的注释只是隐藏不显示。</strong></li><li>java注释<br> &amp;emsp; 不会运行也不会在页面上显示出来。</li><li>jsp注释（常用）<br> &amp;emsp; &lt;%–注释内容–%&gt;，html和原码中都不会出现。</li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>梯度下降算法对比</title>
      <link href="/article/2f618bb.html"/>
      <url>/article/2f618bb.html</url>
      
        <content type="html"><![CDATA[<h1 id="梯度下降方法总结"><a href="#梯度下降方法总结" class="headerlink" title="梯度下降方法总结"></a><center>梯度下降方法总结</center></h1><p>完整的notebook上传到了github上：<a href="https://github.com/xichie/DeepLearning">https://github.com/xichie/DeepLearning</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> mpl_toolkits<span class="token punctuation">.</span>mplot3d <span class="token keyword">import</span> Axes3D<span class="token keyword">from</span> IPython<span class="token punctuation">.</span>display <span class="token keyword">import</span> Image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>深度学习中，我们最常用的优化算法就是基于梯度的方式了。所以在这里总结一下我目前所能理解的方法。（PS：在写这个的过程中，我发现指数平均无处不在啊。这个在可视化模型的Loss值随迭代次数的改变，为了使图像看起来更加平滑，用的也是指数平均。看来是该了解一下了！）</strong></p><h2 id="梯度下降示例（回归问题）"><a href="#梯度下降示例（回归问题）" class="headerlink" title="梯度下降示例（回归问题）"></a>梯度下降示例（回归问题）</h2><p><strong>示例中的数据是自己生成的，真实数据符合：</strong> $$y &#x3D; 3x + 5$$ </p><p><strong>构建$y &#x3D; wx + b$模型拟合数据，  通过梯度下降的方法更新参数w,b。比较几种梯度下降更新方式的优缺点。<br>目标函数为均方误差：$$Loss &#x3D; \frac{1}{N}\sum_{i&#x3D;0}^{N}\frac{1}{2}(\hat{y}^{(i)} - y^{(i)})^2$$</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>y <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">5</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'w'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Data'</span><span class="token punctuation">)</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>ax <span class="token operator">=</span> Axes3D<span class="token punctuation">(</span>fig<span class="token punctuation">)</span>w <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>w<span class="token punctuation">,</span> b <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>w<span class="token punctuation">,</span> b<span class="token punctuation">)</span>loss <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> w_i<span class="token punctuation">,</span> b_i <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y_hat <span class="token operator">=</span> w_i <span class="token operator">*</span> x <span class="token operator">+</span> b_i    loss<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">(</span>y_hat <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        ax<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">30</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'+'</span><span class="token punctuation">)</span>                     <span class="token comment">#最优解</span>ax<span class="token punctuation">.</span>plot_surface<span class="token punctuation">(</span>w<span class="token punctuation">,</span> b<span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>loss<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'rainbow'</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'w'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_zlabel<span class="token punctuation">(</span><span class="token string">'Loss'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Text(0.5,0,&#39;Loss&#39;)</code></pre><p><img src="https://img-blog.csdnimg.cn/20181217144638848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20181217144649206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"></p><h2 id="梯度下降："><a href="#梯度下降：" class="headerlink" title="梯度下降："></a>梯度下降：</h2><p> <strong>深度学习中给一个目标函数$L(w)$  ，我们的目标是找到令其最小化的一组参数$w$。目前最常用的就是梯度下降了，找到一个方向，令当前的$w$向该方向移动从而减小目标函数的值。这个方向就是梯度的负方向（具体证明）。所以$w$的更新公式为：</strong>$$\large w^{t+1} &#x3D; w^{t} - \eta g^t$$<br><strong>其中$\eta$为步长或者学习率，$g^t &#x3D; \frac{\partial L}{\partial w}$即第t次迭代，$L$对$w$的梯度。<br>但上面这种更新参数的方式存在一个问题，就是$\eta$如何取值，如果取值过大就很有可能跳过最优点，取值过小那么更新的就会很慢。我们在更新参数的过程中，一开始离最优解比较远，我们希望步伐迈的可以大一点，当离最优解越来越近的时候，我们希望步伐要小一点，因此有人就提出一种随着迭代次数的增加步长逐渐减小的更新方式：$$\large w^{t+1} &#x3D; w^t - \eta^t g^t$$<br>其中$\eta^t &#x3D; \frac{\eta}{\sqrt{ t+1 }}$,$\eta$ 为 步长或者学习率。<br></strong><br><strong>下面是计算参数w，b梯度以及可视化更新过程代码。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 计算w, b的梯度</span><span class="token keyword">def</span> <span class="token function">compute_grad</span><span class="token punctuation">(</span>paramters<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    y_hat <span class="token operator">=</span> paramters<span class="token punctuation">[</span><span class="token string">'y_hat'</span><span class="token punctuation">]</span>    y <span class="token operator">=</span>  paramters<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span>    x <span class="token operator">=</span> paramters<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span>       grad_w <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y_hat <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">*</span> x<span class="token punctuation">)</span>    grad_b <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y_hat <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> grad_w<span class="token punctuation">,</span> grad_b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 可视化每次参数的更新</span><span class="token keyword">def</span> <span class="token function">plot_history</span><span class="token punctuation">(</span>w_history<span class="token punctuation">,</span> b_history<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span><span class="token number">3.</span><span class="token punctuation">,</span> <span class="token number">5.</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token string">'r'</span> <span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">50</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'+'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>w_history<span class="token punctuation">,</span> b_history<span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>w_history<span class="token punctuation">,</span> b_history<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'w'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>title<span class="token punctuation">)</span>    fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>    ax <span class="token operator">=</span> Axes3D<span class="token punctuation">(</span>fig<span class="token punctuation">)</span>    w <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    w<span class="token punctuation">,</span> b <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>w<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    loss <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> w_i<span class="token punctuation">,</span> b_i <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        y_hat <span class="token operator">=</span> w_i <span class="token operator">*</span> x <span class="token operator">+</span> b_i        loss<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">(</span>y_hat <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>    w_history<span class="token punctuation">,</span> b_history <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>w_history<span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>b_history<span class="token punctuation">)</span>    history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> w_i<span class="token punctuation">,</span> b_i <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>w_history<span class="token punctuation">,</span> b_history<span class="token punctuation">)</span><span class="token punctuation">:</span>        y_hat <span class="token operator">=</span> w_i <span class="token operator">*</span> x <span class="token operator">+</span> b_i        history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">(</span>y_hat <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'k+'</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">20</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>                     <span class="token comment">#最优解</span>    ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>w_history<span class="token punctuation">,</span> b_history<span class="token punctuation">,</span> history<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'k'</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>w_history<span class="token punctuation">,</span> b_history<span class="token punctuation">,</span> history<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'k'</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>plot_surface<span class="token punctuation">(</span>w<span class="token punctuation">,</span> b<span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>loss<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'rainbow'</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'w'</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>set_zlabel<span class="token punctuation">(</span><span class="token string">'Loss'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Gradient-Desent-with-leraning-rate-decay"><a href="#Gradient-Desent-with-leraning-rate-decay" class="headerlink" title="Gradient Desent with leraning rate decay"></a>Gradient Desent with leraning rate decay</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">iteration <span class="token operator">=</span> <span class="token number">100000</span>w <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">0</span>lr <span class="token operator">=</span> <span class="token number">0.001</span>parameters <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>parameters<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">=</span> yparameters<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">=</span> xw_history <span class="token operator">=</span> <span class="token punctuation">[</span>w<span class="token punctuation">]</span>b_history <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">]</span>loss_history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> t <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>iteration<span class="token punctuation">)</span><span class="token punctuation">:</span>    y_hat <span class="token operator">=</span> w <span class="token operator">*</span> x <span class="token operator">+</span> b    parameters<span class="token punctuation">[</span><span class="token string">'y_hat'</span><span class="token punctuation">]</span> <span class="token operator">=</span> y_hat    loss_t <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">(</span>y_hat <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>             <span class="token comment"># mse loss</span>    grad_w<span class="token punctuation">,</span> grad_b <span class="token operator">=</span> compute_grad<span class="token punctuation">(</span>parameters<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    w <span class="token operator">=</span> w <span class="token operator">-</span> lr <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> grad_w    b <span class="token operator">=</span> b <span class="token operator">-</span> lr <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> grad_b    w_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>w<span class="token punctuation">)</span>    b_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    loss_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss_t<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"After iteration 1000000 w = "</span><span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"After iteration 1000000 b = "</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>After iteration 1000000 w =  3.0124698201218907After iteration 1000000 b =  4.838243650840835</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">plot_history<span class="token punctuation">(</span>w_history<span class="token punctuation">,</span> b_history<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'Gradient desent with learning rate decay'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20181217144832880.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20181217144841166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"></p><p><strong><font color=#FF0000 size=3>上图可以看出普通的梯度更新方式，在迭代了10万次后才收敛到最优值(红色十字)，并且有震荡的现象。</font></strong>  </p><p><strong>上述参数更新方法，学习率随着迭代次数的增加就会越来越小。但是这么做还是有些不足，因为所有参数的学习率都是一样的，这是很不科学的，因为对于L的不同维度而言。它距离最优点的距离是不一样的，如下图：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Image<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'./1.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20181217144932229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"><br><strong>图中在 （水平）方向上loss的变化明显要比 （垂直）方向上的变化要明显 。我们如果在更新$w_1$和$w_2$时使用相同的学习率显然是不合适的。<br>我们从上面的的结果中，也可以很清楚的看出传统梯度下降更新参数的缺点，参数w很快就收敛到了最优，但是参数b离最优值还很远。造成这种现象就是因为两个参数每次迭代步长都一样。对于不同的参数我们希望能够有属于自己的学习率，因此提出了一种叫做Adagrad的更新方式。</strong></p><h4 id="更新公式："><a href="#更新公式：" class="headerlink" title="更新公式："></a>更新公式：</h4><p>$$\large w^{t+1} &#x3D; w^t - \frac{\eta}{\sqrt{\sum_{i&#x3D;0}^{t}(g^i)^2}}g^t$$<br><strong>对于参数$w$每次更新的学习率要除以原来所有$w$梯度的平方根。这样对于每一个参数更新的速率都不一样，但是这样做的会产生什么影响呢？直观上的理解，随着算法不断迭代，分母会越来越大，整体的学习率会越来越小。所以，一般来说Adagrad算法一开始是激励收敛，到了后面就慢慢变成惩罚收敛，速度越来越慢。我们的希望也就达到了。</strong></p><p><strong>这么做有什么依据吗？它当然不是凭空得到的。给一个目标函数$L(w)$，求其最小值点，这不就是一个函数求极值的问题吗？我们知道当一阶导数等于0二阶导数大于0时函数有极小值。  给定参数  我们用二阶Taylor公式在这一点展开，得到函数：$$f(w)&#x3D;L(w^t)+L^{‘}(w^t)(w - w^t) + \frac{1}{2}L^{‘’}(w^t)(w-w^t)^2$$</strong><br><strong>$f$就是$L$在$w^t$处的二阶Taylor近似，显然$f$在$w^t$处的值与$L$相等。  我们想要更新参数$w$，根据上面的介绍我们可以找其梯度的反方向乘以一个学习率更新。现在我们可以将这个将这个问题变为寻找$f$的极值，因为$f$是一个二次函数(凸函数)，所以我们令$f$对$w$求导等于0就可以得到极值点:$$w^{t+1} &#x3D; w^t - \frac{L^{‘}(w^t)}{L^{‘’}(w^t)}$$ 这就是在$w^t$处，更新w最优的步长。这种方法就叫做牛顿法。最理想的情况下，牛顿法只需要一次迭代就可以找到最优解。我们跟上述的梯度下降更新公式比较，牛顿法在更新参数$w$的过程中，迈步的大小是跟二阶导数成反比的，也就是说学习率$\eta$实际上替代的是二阶导数。而在Adagrad中使用累计梯度的均方根（root mean square）来近似二阶导数。总之，步长是跟一阶导和二阶导都有关系的，但是二阶导计算复杂度比较高，所以我们设法用其他的方式来近似它或者简化它。</strong></p><h3 id="Adagrad"><a href="#Adagrad" class="headerlink" title="Adagrad"></a>Adagrad</h3><p><strong>在参数更新的方式换成Adagrad后，只迭代了1500次，参数w和b就达到了最优。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">iteration <span class="token operator">=</span> <span class="token number">1500</span>w <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">0</span>lr <span class="token operator">=</span> <span class="token number">1</span>lr_w <span class="token operator">=</span> <span class="token number">0</span>lr_b <span class="token operator">=</span> <span class="token number">0</span>parameters <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>parameters<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">=</span> yparameters<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">=</span> xw_history <span class="token operator">=</span> <span class="token punctuation">[</span>w<span class="token punctuation">]</span>b_history <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">]</span>loss_history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>iteration<span class="token punctuation">)</span><span class="token punctuation">:</span>    y_hat <span class="token operator">=</span> w <span class="token operator">*</span> x <span class="token operator">+</span> b    parameters<span class="token punctuation">[</span><span class="token string">'y_hat'</span><span class="token punctuation">]</span> <span class="token operator">=</span> y_hat    loss_i <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">(</span>y_hat <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>             <span class="token comment"># mse loss</span>    grad_w<span class="token punctuation">,</span> grad_b <span class="token operator">=</span> compute_grad<span class="token punctuation">(</span>parameters<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    lr_w <span class="token operator">+=</span> grad_w <span class="token operator">**</span> <span class="token number">2</span>                                <span class="token comment"># sum w_t ** 2</span>    lr_b <span class="token operator">+=</span> grad_b <span class="token operator">**</span> <span class="token number">2</span>                                <span class="token comment"># sum b_t ** 2</span>    w <span class="token operator">=</span> w <span class="token operator">-</span> lr <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>lr_w<span class="token punctuation">)</span> <span class="token operator">*</span> grad_w    b <span class="token operator">=</span> b <span class="token operator">-</span> lr <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>lr_b<span class="token punctuation">)</span> <span class="token operator">*</span> grad_b    w_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>w<span class="token punctuation">)</span>    b_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    loss_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss_i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>3.00006917710847934.999123082502581</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">plot_history<span class="token punctuation">(</span>w_history<span class="token punctuation">,</span> b_history<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'Adagrad'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20181217145041650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20181217145101164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"></p><p><strong><font color=#FF0000 size=3>上图可以看出Adagrad方法在迭代了1500次后就已经达到最优值(红色十字)，收敛速度有明显的提升，并且也比较稳定。</font></strong>  </p><p><strong>图中我们可以还可以看出Adagrad学习率衰减的过快，为了解决这个问题，有一种叫做RMSprop或均方根反向传播算法，它是由传奇人物Geoffrey Hinton提出的，当时只是在课堂上是随意提出的一个想法。（神一般的人物，都懒得发论文了。。。）更新公式：</strong>   </p><p>$$\large w^t+1 &#x3D; w^t - \frac{\eta}{\sigma^t}g^t$$  </p><p><strong>其中$\sigma^t &#x3D; \sqrt{\alpha(\sigma^{t-1})^2+(1-\alpha)(g^t)^2}$, $\eta$为学习率。</strong>    </p><p><strong>$\sigma^t$的计算公式，实际上是计算了梯度的指数平均值。它使得间隔和权重成比例变化，在计算步长时，用学习率除以$\sigma^t$，从而达到在其可以更快更平滑的向最优参数的方向移动。</strong></p><h3 id="RMSprop"><a href="#RMSprop" class="headerlink" title="RMSprop"></a>RMSprop</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">iteration <span class="token operator">=</span> <span class="token number">200</span>w <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">0</span>lr <span class="token operator">=</span> <span class="token number">0.1</span>lr_w <span class="token operator">=</span> <span class="token number">0</span>lr_b <span class="token operator">=</span> <span class="token number">0</span>alpha <span class="token operator">=</span> <span class="token number">0.9</span>parameters <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>parameters<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">=</span> yparameters<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">=</span> xw_history <span class="token operator">=</span> <span class="token punctuation">[</span>w<span class="token punctuation">]</span>b_history <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">]</span>loss_history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>iteration<span class="token punctuation">)</span><span class="token punctuation">:</span>    y_hat <span class="token operator">=</span> w <span class="token operator">*</span> x <span class="token operator">+</span> b    parameters<span class="token punctuation">[</span><span class="token string">'y_hat'</span><span class="token punctuation">]</span> <span class="token operator">=</span> y_hat    loss_i <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">(</span>y_hat <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>             <span class="token comment"># mse loss</span>    grad_w<span class="token punctuation">,</span> grad_b <span class="token operator">=</span> compute_grad<span class="token punctuation">(</span>parameters<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    lr_w <span class="token operator">=</span> alpha <span class="token operator">*</span> lr_w <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>alpha<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>grad_w<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>                                    lr_b <span class="token operator">=</span> alpha <span class="token operator">*</span> lr_b<span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>alpha<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>grad_b<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>                                   w <span class="token operator">=</span> w <span class="token operator">-</span> lr <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>lr_w<span class="token punctuation">)</span> <span class="token operator">*</span> grad_w    b <span class="token operator">=</span> b <span class="token operator">-</span> lr <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>lr_b<span class="token punctuation">)</span> <span class="token operator">*</span> grad_b    w_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>w<span class="token punctuation">)</span>    b_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    loss_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss_i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>3.05009964199766745.0484005151171925</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">plot_history<span class="token punctuation">(</span>w_history<span class="token punctuation">,</span> b_history<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'RMSprop'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20181217145204950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20181217145219570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"></p><p><strong><font color=#FF0000 size=3>上图可以看出，RMSprop只用了不到200次迭代就达到了最优值，并且学习率衰减的也很平缓，它同样也很稳定。</font></strong></p><p><strong>RMSprop更新参数的方式跟Adagrad相比，主要是解决了Adagrad学习率衰减过快的问题，这个问题在模型比较复杂时非常重要，可以在一定程度上防止在参数更新时跳过最优值。</strong></p><p><strong>上面提到的对原始梯度方法更新参数的改进，关注点都为学习率衰减这个问题。但在模型比较复杂的情况下，还存在一个非常非常重要的问题，那就是局部最优。 如何避免参数陷入局部最优，下面介绍的这种Momentum方法，在一定程度上缓解了这个问题，并且还可以加快收敛速度。</strong><br><strong>Momentum是一种动量的梯度下降方式，那么什么是动量呢？我认为就是每次在参数更新时，都会有一个初始的速度。原始的梯度下降每次迭代更新参数的过程中，我们都会在计算当前位置梯度，然后去更新参数，我们上面已经介绍过了，这种更新方式会在一些对梯度敏感的参数方向上来回震荡。Momentum解决这个问题的方式就是，在更新当前参数时考虑原来的上一次的梯度。通俗的理解就是，一个人如果在原地静止不动，让他突然来一个大转弯，那么他很轻松的就可以转过来。如果这个人正在向一个方向奔跑，让他突然来一个大转弯，那显然很吃力，一般的情况下我们会有一个弧度慢慢的转过来。Momentum就是这样更新参数的，在每次更新参数时，用上一次的梯度乘以一个系数$\beta$加上这一次的梯度，用这个累加的梯度去更新。在当前梯度很小或者为0时，由于上一次梯度的存在，参数也会更新，这样在一定程度上也防止了陷入局部最优的情况。更新公式:</strong><br>$$v^0 &#x3D; 0$$<br>$$g^t &#x3D; \frac{\partial{L}}{\partial{w^t}}$$<br>$$v^{t+1} &#x3D; \beta v^t + (1 - \beta)g^t$$<br>$$w^{t+1} &#x3D; w^{t} - \eta v^{t+1}$$<br><strong>其中$\beta$为一个[0, 1)之间的常数，当$\beta$趋近于1，表示我们更看重上一次的梯度，反之，表示更看重当前的梯度。$\eta$为学习率。</strong></p><h2 id="Momentum"><a href="#Momentum" class="headerlink" title="Momentum"></a>Momentum</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">iteration <span class="token operator">=</span> <span class="token number">1000</span>w <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">0</span>lr <span class="token operator">=</span> <span class="token number">0.001</span>v_w <span class="token operator">=</span> <span class="token number">0</span>v_b <span class="token operator">=</span> <span class="token number">0</span>beta <span class="token operator">=</span> <span class="token number">0.9</span>parameters <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>parameters<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">=</span> yparameters<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">=</span> xw_history <span class="token operator">=</span> <span class="token punctuation">[</span>w<span class="token punctuation">]</span>b_history <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">]</span>loss_history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>iteration<span class="token punctuation">)</span><span class="token punctuation">:</span>    y_hat <span class="token operator">=</span> w <span class="token operator">*</span> x <span class="token operator">+</span> b    parameters<span class="token punctuation">[</span><span class="token string">'y_hat'</span><span class="token punctuation">]</span> <span class="token operator">=</span> y_hat    loss_i <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">(</span>y_hat <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>             <span class="token comment"># mse loss</span>    grad_w<span class="token punctuation">,</span> grad_b <span class="token operator">=</span> compute_grad<span class="token punctuation">(</span>parameters<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    v_w <span class="token operator">=</span> beta <span class="token operator">*</span> v_w <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> beta<span class="token punctuation">)</span> <span class="token operator">*</span> grad_w      v_b <span class="token operator">=</span> beta <span class="token operator">*</span> v_b <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> beta<span class="token punctuation">)</span> <span class="token operator">*</span> grad_b    w <span class="token operator">=</span> w <span class="token operator">-</span> lr <span class="token operator">*</span> v_w    b <span class="token operator">=</span> b <span class="token operator">-</span> lr <span class="token operator">*</span> v_b    w_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>w<span class="token punctuation">)</span>    b_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    loss_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss_i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>3.00134974384205274.982491356406397</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">plot_history<span class="token punctuation">(</span>w_history<span class="token punctuation">,</span> b_history<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'Momentum'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20181217145534105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20181217145546955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"></p><p><strong><font color=#FF0000 size=3>上图可以看出，Momentum在一开始在参数w方向震荡的还是比较严重的，这是因为一开始梯度的累加还很小，但是很快随着梯度的累加，它所占的比重越来越大，震荡的现象开始逐渐的缓和，并向着最优的方向直线前进。</font></strong></p><p><strong>上面介绍的这几种梯度更新方法，原始学习率衰减的梯度下降、Adagrad、RMSprop这几个考虑的学习率衰减的改进，Momentum考虑的是如何能够找到一个更好且更平滑的更新方向，且可以快速的到达最优解。下面介绍的梯度下降方法叫做Adam，它可以看做是RMSprop和Momentum的结合，它同时拥有两者的优点，所以它也是目前在深度学习中最最最流行的更新方式。具体的也不说了，很好用就得了。公式太多直接引用<a href="https://arxiv.org/abs/1412.6980">论文</a>中的：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Image<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'./adam.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20181217145608932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"></p><h2 id="Adam"><a href="#Adam" class="headerlink" title="Adam"></a>Adam</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">iteration <span class="token operator">=</span> <span class="token number">1000</span>w <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">0</span>epslion<span class="token operator">=</span><span class="token number">1e-8</span>lr <span class="token operator">=</span> <span class="token number">0.01</span>v_w <span class="token operator">=</span> <span class="token number">0</span>v_b <span class="token operator">=</span> <span class="token number">0</span>m_w <span class="token operator">=</span> <span class="token number">0</span>m_b <span class="token operator">=</span><span class="token number">0</span>beta1 <span class="token operator">=</span> <span class="token number">0.1</span>beta2 <span class="token operator">=</span> <span class="token number">0.6</span>parameters <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>parameters<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">=</span> yparameters<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token comment"># for beta1 in np.arange(0, 1, step=0.1):</span><span class="token comment">#     for beta2 in np.arange(0, 1, step=0.1):</span>w <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">0</span>w_history <span class="token operator">=</span> <span class="token punctuation">[</span>w<span class="token punctuation">]</span>b_history <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">]</span>loss_history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>iteration<span class="token punctuation">)</span><span class="token punctuation">:</span>    y_hat <span class="token operator">=</span> w <span class="token operator">*</span> x <span class="token operator">+</span> b    parameters<span class="token punctuation">[</span><span class="token string">'y_hat'</span><span class="token punctuation">]</span> <span class="token operator">=</span> y_hat    loss_i <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">(</span>y_hat <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>             <span class="token comment"># mse loss</span>    grad_w<span class="token punctuation">,</span> grad_b <span class="token operator">=</span> compute_grad<span class="token punctuation">(</span>parameters<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    m_w <span class="token operator">=</span> beta1 <span class="token operator">*</span> m_w <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> beta1<span class="token punctuation">)</span> <span class="token operator">*</span> grad_w    m_b <span class="token operator">=</span> beta1 <span class="token operator">*</span> m_w <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> beta1<span class="token punctuation">)</span> <span class="token operator">*</span> grad_b    v_w <span class="token operator">=</span> beta2 <span class="token operator">*</span> v_w <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> beta2<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>grad_w <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>    v_b <span class="token operator">=</span> beta2 <span class="token operator">*</span> v_b <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> beta2<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>grad_b <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>    m_w_hat <span class="token operator">=</span> m_w <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> beta1 <span class="token operator">**</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    m_b_hat <span class="token operator">=</span> m_b <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> beta1 <span class="token operator">**</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    v_w_hat <span class="token operator">=</span> v_w <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> beta2 <span class="token operator">**</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    v_b_hat <span class="token operator">=</span> v_b <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> beta2 <span class="token operator">**</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    w <span class="token operator">=</span> w <span class="token operator">-</span> lr <span class="token operator">*</span> m_w_hat <span class="token operator">/</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>v_w_hat<span class="token punctuation">)</span> <span class="token operator">+</span> epslion<span class="token punctuation">)</span>    b <span class="token operator">=</span> b <span class="token operator">-</span> lr <span class="token operator">*</span> m_b_hat <span class="token operator">/</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>v_b_hat<span class="token punctuation">)</span> <span class="token operator">+</span> epslion<span class="token punctuation">)</span>    w_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>w<span class="token punctuation">)</span>    b_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    loss_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss_i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'beta1 = %f, beta2 = %f'</span><span class="token operator">%</span><span class="token punctuation">(</span>beta1<span class="token punctuation">,</span> beta2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>beta1 = 0.100000, beta2 = 0.6000003.00409079486528045.009537540692813</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">plot_history<span class="token punctuation">(</span>w_history<span class="token punctuation">,</span> b_history<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'Adam'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20181217145639103.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20181217145648458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTcyNzM1,size_16,color_FFFFFF,t_70"></p><p><strong>从上面的结果中，貌似Adam的表现还不如RMSprop，可能是我写的例子太简单了。。。。。根据别人的经验，在模型复杂时，特别是深度神经网络中，不妨优先试试Adam，它的效果一般都不错。<font color=#FF0000>（PS：Ng说的）</font></strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>由于现在各种深度学习toolkits的出现,比如Keras(我的最爱)，Tensorflow，Pytorch（12月刚发布了1.0版本，貌似很厉害。。。。）等，人们可以不用太去关系梯度的计算和反向传播这些问题，极大的简化了从理论到实践的过程。我们只要有一个好的想法，可以很方便快速的利用这些工具去实现它。我认为这是目前深度学习这么火很重要的原因，试想一下，如果都从底层造轮子(我并不反对这个)，那这个难度就可以把绝大部分人挡在深度学习的大门外，说了一堆废话。。。。。回归正题。<br>总结这个最大的收获，自己要理解这些方法的基本原理是什么，当以后使用它的时候，最起码知道，每种方法的优势在哪儿，每个参数的意义是什么。在使用这些toolkits时,才能做到心中有数。</strong> </p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] 李宏毅，台湾大学. <a href="http://speech.ee.ntu.edu.tw/~tlkagk/courses.html">Machine Learning (2017,Fall) </a>.<br>[2] 深度学习（中文版）（Ian Goodfellow, Yoshua Bengio, Aaron Courville)<br>[3] Kingma D P , Ba J . <a href="https://arxiv.org/abs/1412.6980">Adam: A Method for Stochastic Optimization[J]</a>. Computer Science, 2014.</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 梯度下降 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web相关知识</title>
      <link href="/article/a5b5607a.html"/>
      <url>/article/a5b5607a.html</url>
      
        <content type="html"><![CDATA[<h1 id="servlet生命周期"><a href="#servlet生命周期" class="headerlink" title="servlet生命周期"></a>servlet生命周期</h1><p>&amp;#8195; &amp;#8195;<strong>servelt是一个单实例多线程的动态web技术。</strong> 默认情况下，第一次访问时调用init方法初始化。每当接受一个请求，就创建一个线程，并调用对应的service方法。最后，当此servlet被移除或者服务器正常关闭的时候，调用用destroy方法销毁。</p><h1 id="session生命周期"><a href="#session生命周期" class="headerlink" title="session生命周期"></a>session生命周期</h1><p>当服务器启动，第一次调用getSeesion方法时，session创建。<br>session销毁的方式：</p><ul><li>seesion有默认的销毁时间，在web.xml中配置。</li><li>非正常原因关闭服务器。（正常关闭服务器，session不会销毁，会序列化到磁盘上）  </li><li>调用invalidate()方法销毁。</li></ul><h1 id="重定向和请求转发的区别："><a href="#重定向和请求转发的区别：" class="headerlink" title="重定向和请求转发的区别："></a>重定向和请求转发的区别：</h1><h2 id="重定向："><a href="#重定向：" class="headerlink" title="重定向："></a>重定向：</h2><p>两次请求，可以访问外部资源，路径要加项目名。<br>状态码：302<br>响应头：location：url （url必须加项目名）</p><h2 id="请求转发："><a href="#请求转发：" class="headerlink" title="请求转发："></a>请求转发：</h2><p>一次请求，只能访问内部资源，路径不能添加项目名。★</p><h1 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h1><p>会话：它是一个过程，针对的是每个用户。打开浏览器，发送多次请求，得到多次响应，该过程叫做会话。<br>会话可以简单的分为：<strong>Cookie(基于客户端的技术)、Session(基于服务器端的技术)</strong></p><h2 id="Cookie技术："><a href="#Cookie技术：" class="headerlink" title="Cookie技术："></a>Cookie技术：</h2><p>流程：</p><ol><li>浏览器端第一次向服务器发送请求</li><li>在服务端创建Cookie：Cookie c &#x3D; new Cookie(key,  value)</li><li>通过response对象的addCookie方法，将服务器创建Cookie回写给浏览器端，并在浏览器端保存。响应头为set-cookie：key&#x3D;value</li><li>当浏览器向服务器发送第二次请求时，请求头中包含cookie：key&#x3D;value</li><li>服务器接受请求后，通过request.getCookies()获取Cookie对象，继续操作Cookie对象，并回写Cookie</li><li>默认情况下，当浏览器关闭后，Cookie会被清除。可以通过setMaxAge方法设置Cookie在浏览器端保存的时间。</li></ol><h2 id="session技术："><a href="#session技术：" class="headerlink" title="session技术："></a>session技术：</h2><p>流程：<br> 7. 当浏览器第一次访问服务器，会在服务器端创建一个session空间，可以在空间中存取一些值。获得该空间的唯一标识jsessionid，并将jsessionid回写给浏览器set-cookie：jsessionid&#x3D;value。<br> 8. 浏览器第二次访问服务器时，在请求头中会有jsessionid&#x3D;value，然后通过它来访问自己的seesion空间。</p><h1 id="Ajax异步请求"><a href="#Ajax异步请求" class="headerlink" title="Ajax异步请求"></a>Ajax异步请求</h1><p>异步请求：就是只提交页面的一部分数据和服务器交互，局部刷新页面。如果服务器没有相应，也不会影响页面上的其它操作。<br><strong>———————————————— 了解内容—————————————————</strong><br>js提供了一个XMLHttpRequest对象来实现异步的请求。具体的步骤如下：</p><ul><li>创建XMLHttpReques对象xhr。</li><li>连接资源。使用open(url)方法。</li><li>设置请求的参数。send()方法。如send(“username&#x3D;”+tom+”&amp;password&#x3D;”+123）</li><li>使用onreadystatechange时间监听xhr对象状态的改变。若xhr.readyState&#x3D;&#x3D;4且判状态码xhr.status 为200。</li><li>获取服务器响应的内容。xhr.responseText；<br><strong>—————————————— 了解内容—————————————————</strong></li></ul><h1 id="使用jQuery对象实现异步请求："><a href="#使用jQuery对象实现异步请求：" class="headerlink" title="使用jQuery对象实现异步请求："></a>使用jQuery对象实现异步请求：</h1><p><strong>jQuery对象</strong></p><p>DOM对象转换为jQuery对象：$(dom对象)<br>jQuery对象转换为DOM对象：<br>————— jQuery对象是一个数组对象。可以通过下标或者get(index)方法获取dom对象<br>DOM对象和JQuery对象的对比：<br>如果ID值不存在, DOM对象会报错，jQuery对象不会。</p><p><strong>jQuery中的Ajax</strong></p><p> 常用的方法：</p><ul><li>对象.load(url, data, callback(data, textStatus, XMLHttpRequest ))</li><li>$.get(url, data, callback, type)</li><li>$.post(url, data, callback, type)</li><li>$.ajax()<br> 其中：<br>  url：请求的资源路径<br>  data：请求的参数<br>  callback：回调函数，得到响应后的处理方式<br>  type: 返回内容的格式。如：html, script, json, text, xml<br>  ————data：响应的内容<br>  ————textStatus: 请求的状态<br>  ————XMLHttpRequest : 底层对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络笔记</title>
      <link href="/article/db0b4310.html"/>
      <url>/article/db0b4310.html</url>
      
        <content type="html"><![CDATA[<h1 id="运输层："><a href="#运输层：" class="headerlink" title="运输层："></a>运输层：</h1><h2 id="TCP协议："><a href="#TCP协议：" class="headerlink" title="TCP协议："></a>TCP协议：</h2><h3 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h3><ul><li><p>TCP是面向连接的： 两个应用进程通过网络发送数据，必须先相互“握手”。</p></li><li><p>TCP提供的是全双工服务（双向的）：一台主机上的进程A与另一台主机上的进程B如果存在一条TCP连接，难么应用层的数据就可以从B到A，也可以从A到B。</p></li><li><p>TCP连接是点对点的：一个发送方只能对应一个接受方。即TCP不支持一对多连接。</p></li><li><p><strong>TCP连接的建立的过程</strong>：————————————————————————–</p></li><li><p><strong>TCP连接的组成</strong>：一台主机上的缓存、变量和与进程连接的套接字。令一台主机上的缓存、变量和与进程连接的套接字。</p><center>  <img style="border-radius: 0.3125em;  box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"   src="https://img-blog.csdnimg.cn/20200429163539724.png#pic_center">  <br>  <div style="color:orange; border-bottom: 1px solid #d9d9d9;  display: inline-block;  color: #999;  padding: 2px;">图1 tcp发送缓存和接收缓存</div></center></li><li><p>最大报文长度（MSS，Maximum Segment Size）：TCP从缓存中取出并放入报文段中最大的数据数量。（注意，MSS为只包含应用层数据的最大长度，不包括TCP报文首部）默认由最大传输端单元来设置。常用的值：1460字节 &#x3D; 1500 - 40字节。40字节为TCP报文首部长度。1500字节为MTU常用值。</p></li><li><p>最大传输单元（MTU，Maximum Transmission Unit）：本地发送主机发送的最大链路层帧长度。 一般为1500字节。</p></li><li><p>报文段： TCP为每个报文段都配置一个TCP首部，形成多个TCP报文段。</p></li></ul><p><strong>综上，图1的TCP传输过程为：进程A将通过套接字，将应用数据写入TCP的发送缓存。然后TCP根据MSS从缓存中取出数据，并给每块数据配上一个TCP首部，形成报文段。并将这些报文端下传到网络层，网络层将其分别封装在IP数据报中，将这些数据报发送到网络中。另一端接收到一个报文段后，将报文段中的数据取出放入接收缓存中，进程B通过套接字就可以读取接收缓存中的数据。</strong></p><h3 id="TCP报文段的结构"><a href="#TCP报文段的结构" class="headerlink" title="TCP报文段的结构"></a>TCP报文段的结构</h3><ul><li>序号：TCP把数据看成一个无结构的、有序的数据流。序号就是指每个报文段中数据在数据流中的起始位置，终止位置为：起始位置+MSS。</li><li>确认号：主机A的确认号就是A期望接收的下一个报文段的序号。</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
